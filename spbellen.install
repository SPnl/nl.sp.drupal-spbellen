<?php

/**
 * Drupal install and update functionality.
 */

 /**
  * Implements hook_uninstall().
  */
function spbellen_uninstall() {
  $quantity = variable_get('click2dial_call_numbers_quantity', 2);
  for ($nr = 1; $nr <= $quantity; $nr++) {
    variable_del('spbellen_click2dial_callerIDName_' . $nr);
    variable_del('spbellen_click2dial_forceclip_' . $nr);
  }
  variable_del('click2dial_call_numbers_quantity');

  variable_del('spbellen_campaign_select_intro');
  variable_del('spbellen_click2dial_asterix_ip');
  variable_del('spbellen_click2dial_asterix_domain');
  variable_del('spbellen_click2dial_location_ip');
  variable_del('spbellen_click2dial_shortname');

  variable_del('spbellen_general_start_page');
  variable_del('spbellen_login_intro_campaign_code');
  variable_del('spbellen_login_intro_first_visit');
  variable_del('spbellen_login_intro_no_campaign_code');
  variable_del('spbellen_login_intro_password');
}

/**
 * Implements hook_schema().
 */
function spbellen_schema() {
  $schema['spbellen_campaign'] = array(
    'description' => 'Campaign settings',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Campaign title.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'webform_id' => array(
        'description' => 'The webform id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'afdeling_filter' => array(
        'description' => 'Wether caller contacts are filtered on caller afdelingsregion.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'disabled' => array(
        'description' => 'Wether the campaign is disabled.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'campaign_code' => array(
        'description' => 'Campaign code.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'caller_check' => array(
        'description' => 'Wether to check the caller or not.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'intro_text' => array(
        'description' => 'Campaign caller introduction text.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'start_page_text' => array(
        'description' => 'Campaign start page text.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'click2dial_call_number' => array(
        'description' => 'Click2dial call number.',
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(
      'webform_id' => array(
        'webform_id',
      ),
    ),
  );

  $schema['spbellen_targets'] = array(
    'description' => 'Target contacts for campaigns.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'description' => 'Contact id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'The campaign id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'last_action_id' => array(
        'description' => 'The id of the last call action performed for this target.',
        'type' => 'int',
        'size' => 'big',
      ),
      'attempts' => array(
        'description' => 'Number of calls made.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'occupied' => array(
        'description' => 'Wether the contact is being called.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'date' => array(
        'description' => 'The moment when the target was occupied.',
        'type' => 'int',
        'size' => 'big',
      ),
      'caller_id' => array(
        'description' => 'The civicrm id of the caller.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'state' => array(
        'description' => 'State (0 => inactive, 1 => active).',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
        'not null' => TRUE,
      ),
      'sync_id' => array(
        'description' => 'Sync id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(
      'campaign_target' => array(
        'contact_id',
        'campaign_id',
      ),
    ),
    'indexes' => array(
      'contact_id' => array('contact_id'),
      'last_action_id' => array('last_action_id'),
      'campaign_id' => array('campaign_id'),
      'caller_id' => array('caller_id'),
      'sync_id' => array('sync_id'),
    ),
  );

  $schema['spbellen_action'] = array(
    'description' => 'Actions on target contact for campaign.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'target_id' => array(
        'description' => 'The target id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'caller_id' => array(
        'description' => 'The user id performing the action.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'result' => array(
        'description' => 'Either not_answered, wrong_number, answered_completed, answered_call_back, answered_blacklist.',
        'type' => 'varchar',
        'length' => 255,
        'not_null' => TRUE,
      ),
      'webform_submission_id' => array(
        'description' => 'The webform submission id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'call_back_time' => array(
        'description' => 'Unix timestamp.',
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'call_back_priority' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
      'caller_message' => array(
        'description' => 'Message for next caller.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'indexes' => array(
      'target_id' => array('target_id'),
      'caller_id' => array('caller_id'),
      'timestamp' => array('timestamp'),
      'webform_submission_id' => array('webform_submission_id'),
      'call_back_time' => array('call_back_time'),
    ),
  );

  $schema['spbellen_blacklist'] = array(
    'description' => 'Contacts that should not be called.',
    'fields' => array(
      'contact_id' => array(
        'description' => 'Contact id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'contact_id',
    ),
  );

  $schema['spbellen_contact_data'] = array(
    'description' => 'Contact data.',
    'fields' => array(
      'contact_id' => array(
        'description' => 'Contact id.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'crm_contact_id' => array(
        'description' => 'Contact id',
        'type' => 'int',
        'size' => 'big',
      ),
      'phone' => array(
        'description' => 'Contact phone number.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'display_name' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email' => array(
        'description' => 'Email address',
        'type' => 'varchar',
        'length' => 255,
      ),
      'street_address' => array(
        'description' => 'Street address',
        'type' => 'varchar',
        'length' => 255,
      ),
      'postal_code' => array(
        'description' => 'Postal code',
        'type' => 'varchar',
        'length' => 255,
      ),
      'city' => array(
        'description' => 'City',
        'type' => 'varchar',
        'length' => 255,
      ),
      'gender' => array(
        'description' => 'Gender',
        'type' => 'varchar',
        'length' => 255,
      ),
      'is_lid' => array(
        'description' => 'Membership status',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'afdeling' => array(
        'description' => 'Afdeling',
        'type' => 'varchar',
        'length' => 255,
      ),
      'afdeling_id' => array(
        'description' => 'Afdeling id',
        'type' => 'int',
        'size' => 'big',
      ),
      'regio' => array(
        'description' => 'Regio',
        'type' => 'varchar',
        'length' => 255,
      ),
      'regio_id' => array(
        'description' => 'Regio id',
        'type' => 'int',
        'size' => 'big',
      ),
      'notes' => array(
        'description' => 'Contact notes important for caller.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      'contact_id',
    ),
    'indexes' => array(
      'crm_contact_id' => array('crm_contact_id'),
    ),
  );

  $schema['spbellen_local_access'] = array(
    'description' => 'Local account campaign access.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Local account user id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'Campaign id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'hash' => array(
        'description' => 'Hash',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'campaign_id' => array('campaign_id'),
      'hash' => array('hash'),
    ),
  );

  $schema['spbellen_caller'] = array(
    'description' => 'Local account campaign access.',
    'fields' => array(
      'caller_id' => array(
        'description' => 'Caller account id',
        'type' => 'int',
        'size' => 'big',
      ),
      'access_type' => array(
        'description' => 'Caller access type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'Caller state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => 'registered',
      ),
      'first_name' => array(
        'description' => 'First name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'middle_name' => array(
        'description' => 'Middle name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'last_name' => array(
        'description' => 'Last name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'display_name' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'phone' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'postal_code' => array(
        'description' => 'Postal code',
        'type' => 'varchar',
        'length' => 255,
      ),
      'afdeling' => array(
        'description' => 'Afdeling',
        'type' => 'varchar',
        'length' => 255,
      ),
      'afdeling_id' => array(
        'description' => 'Afdeling id',
        'type' => 'int',
        'size' => 'big',
      ),
      'regio' => array(
        'description' => 'Regio',
        'type' => 'varchar',
        'length' => 255,
      ),
      'regio_id' => array(
        'description' => 'Regio id',
        'type' => 'int',
        'size' => 'big',
      ),
    ),
    'primary key' => array(
      'caller_id',
    ),
    'unique keys' => array(
      'caller_access' => array(
        'caller_id',
        'access_type',
      ),
    ),
  );

  $schema['spbellen_import_history'] = array(
    'description' => 'Campaign import history',
    'fields' => array(
      'id' => array(
        'description' => 'Id.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'Campaign_id',
        'type' => 'int',
        'size' => 'big',
      ),
      'title' => array(
        'description' => 'Title',
        'type' => 'text',
        'size' => 'normal',
      ),
      'date' => array(
        'description' => 'The moment when the import was finished.',
        'type' => 'int',
        'size' => 'big',
      ),
      'quantity' => array(
        'description' => 'Number of contacts imported',
        'type' => 'int',
        'size' => 'big',
      ),
      'state' => array(
        'description' => 'State (0 => inactive, 1 => active).',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
        'not null' => TRUE,
      ),
      'call_order' => array(
        'description' => 'Sync_id',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'block' => array(
        'description' => 'Block',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'importer' => array(
        'description' => 'Name of the importer',
        'type' => 'varchar',
        'length' => '255',
      ),
      'external_campaign_id' => array(
        'description' => 'External campaign_id',
        'type' => 'int',
        'size' => 'big',
      ),
      'external_last_imported_id' => array(
        'description' => 'Last imported external contact id',
        'type' => 'int',
        'size' => 'big',
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'indexes' => array(
      'campaign_id' => array('campaign_id'),
      'date' => array('date'),
      'call_order' => array('call_order'),
      'state' => array('state'),
      'block' => array('block'),
    ),
  );

  $schema['spbellen_target_import_relation'] = array(
    'description' => 'Target import relation.',
    'fields' => array(
      'id' => array(
        'description' => 'Id.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'target_id' => array(
        'description' => 'Target_id',
        'type' => 'int',
        'size' => 'big',
      ),
      'import_id' => array(
        'description' => 'Import id.',
        'type' => 'int',
        'size' => 'big',
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(
      'target_import_id' => array(
        'target_id',
        'import_id',
      ),
    ),
    'indexes' => array(
      'target_id' => array('target_id'),
      'import_id' => array('import_id'),
      'target_import' => array(
        'target_id',
        'import_id',
      ),
    ),
  );

  return $schema;
}

/**
 * Add call again field to {spbellen_action} table.
 */
function spbellen_update_7001() {
  if (!db_field_exists('spbellen_action', 'call_back_time')) {
    $spec = array(
      'description' => 'Unix timestamp.',
      'type' => 'int',
      'size' => 'big',
      'not null' => FALSE,
    );
    db_add_field('spbellen_action', 'call_back_time', $spec);
  }
}

/**
 * Add caller message field to {spbellen_action} table.
 */
function spbellen_update_7002() {
  if (!db_field_exists('spbellen_action', 'caller_message')) {
    $spec = array(
      'description' => 'Message for next caller.',
      'type' => 'text',
      'size' => 'normal',
      'not null' => FALSE,
    );
    db_add_field('spbellen_action', 'caller_message', $spec);
  }
}

/**
 * Add intro text field to {spbellen_campaign} table.
 */
function spbellen_update_7003() {
  if (!db_field_exists('spbellen_campaign', 'intro_text')) {
    $spec = array(
      'description' => 'Campaign caller introduction text.',
      'type' => 'text',
      'size' => 'normal',
      'not null' => FALSE,
    );
    db_add_field('spbellen_campaign', 'intro_text', $spec);
  }
}

/**
 * Add target data to table {spbellen_contact_data} table.
 */
function spbellen_update_7004() {
  if (!db_table_exists('spbellen_contact_data')) {
    $table = array(
      'description' => 'Contact data.',
      'fields' => array(
        'contact_id' => array(
          'description' => 'Contact id',
          'type' => 'int',
          'size' => 'big',
        ),
        'phone' => array(
          'description' => 'Contact phone number.',
          'type' => 'varchar',
          'length' => 255,
        ),
        'display_name' => array(
          'description' => 'Display name',
          'type' => 'varchar',
          'length' => 255,
        ),
        'email' => array(
          'description' => 'Email address',
          'type' => 'varchar',
          'length' => 255,
        ),
        'street_address' => array(
          'description' => 'Street address',
          'type' => 'varchar',
          'length' => 255,
        ),
        'postal_code' => array(
          'description' => 'Postal code',
          'type' => 'varchar',
          'length' => 255,
        ),
        'city' => array(
          'description' => 'City',
          'type' => 'varchar',
          'length' => 255,
        ),
        'gender' => array(
          'description' => 'Gender',
          'type' => 'varchar',
          'length' => 255,
        ),
        'is_lid' => array(
          'description' => 'Membership status',
          'type' => 'int',
          'size' => 'tiny',
        ),
      ),
      'primary key' => array(
        'contact_id',
      ),
    );
    db_create_table('spbellen_contact_data', $table);
  }
}

/**
 * Add open_access to  {spbellen_campaign} table.
 */
function spbellen_update_7005() {
  $spec = array(
    'description' => 'Wether open sign up is allowed for the campaign.',
    'type' => 'int',
    'size' => 'tiny',
    'default' => 0,
    'not null' => TRUE,
  );
  db_add_field('spbellen_campaign', 'open_access', $spec);
}

/**
 * Add campaign code to  {spbellen_campaign} table.
 */
function spbellen_update_7006() {
  if (!db_field_exists('spbellen_campaign', 'campaign_code')) {
    $spec = array(
      'description' => 'Campaign code.',
      'type' => 'varchar',
      'length' => '255',
    );
    db_add_field('spbellen_campaign', 'campaign_code', $spec);
  }
}


/**
 * Add local {spbellen_local_access} table.
 */
function spbellen_update_7007() {
  if (!db_table_exists('spbellen_local_access')) {
    $table = array(
      'description' => 'Local account campaign access.',
      'fields' => array(
        'id' => array(
          'description' => 'Primary key.',
          'type' => 'serial',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'Local account user id.',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'campaign_id' => array(
          'description' => 'Campaign id.',
          'type' => 'int',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'hash' => array(
          'description' => 'Hash',
          'type' => 'varchar',
          'length' => '255',
        ),
      ),
      'primary key' => array(
        'id',
      ),
    );
    db_create_table('spbellen_local_access', $table);
  }
}

/**
 * Modify caller_id column type from integer to varchar.
 */
function spbellen_update_7008() {
  db_change_field('spbellen_targets', 'caller_id', 'caller_id',
    array(
      'type' => 'varchar',
      'length' => '255',
    )
  );
  db_change_field('spbellen_action', 'caller_id', 'caller_id',
    array(
      'type' => 'varchar',
      'length' => '255',
    )
  );
}

/**
 * Add sync_id {spbellen_targets} table.
 */
function spbellen_update_7009() {
  if (!db_field_exists('spbellen_targets', 'sync_id')) {
    $spec = array(
      'description' => 'Sync id.',
      'type' => 'int',
      'size' => 'big',
      'not null' => FALSE,
    );
    db_add_field('spbellen_targets', 'sync_id', $spec);
  }
}

/**
 * Add campaign title to  {spbellen_campaign} table.
 */
function spbellen_update_7012() {
  if (!db_field_exists('spbellen_campaign', 'title')) {
    $spec = array(
      'description' => 'Campaign title.',
      'type' => 'varchar',
      'length' => '255',
    );
    db_add_field('spbellen_campaign', 'title', $spec);
  }
}

/**
 * Add caller {spbellen_caller} table.
 */
function spbellen_update_7013() {
  if (!db_table_exists('spbellen_caller')) {
    $table = array(
      'description' => 'Local account campaign access.',
      'fields' => array(
        'caller_id' => array(
          'description' => 'Caller account id',
          'type' => 'int',
          'size' => 'big',
        ),
        'access_type' => array(
          'description' => 'Caller access type.',
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
        ),
        'state' => array(
          'description' => 'Caller state.',
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => 'registered',
        ),
        'first_name' => array(
          'description' => 'First name',
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
        'middle_name' => array(
          'description' => 'Middle name',
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
        'last_name' => array(
          'description' => 'Last name',
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
        'display_name' => array(
          'description' => 'Display name',
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
        'phone' => array(
          'description' => 'Display name',
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
      ),
      'primary key' => array(
        'caller_id',
      ),
      'unique keys' => array(
        'caller_access' => array(
          'caller_id',
          'access_type',
        ),
      ),
    );

    db_create_table('spbellen_caller', $table);
  }

  // Transfer data for existing users.
  $users = entity_load('user');
  if (!empty($users)) {
    foreach ($users as $account) {
      $sync = FALSE;
      if (
        strpos($account->init, 'spoauth_') !== FALSE
      ) {
        // SPNET access.
        $sync = TRUE;
        $type = 'spnet';
      }
      else {
        // Check if local access.
        $query = new entityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'local_access')
          ->propertyCondition('uid', $account->uid)
          ->execute();
        if (isset($result['local_access'])) {
          $sync = TRUE;
          $type = 'local';
        }
      }
      if ($sync) {
        $account_wrapped = entity_metadata_wrapper('user', $account);
        $fields = array(
          'field_first_name',
          'field_middle_name',
          'field_last_name',
        );
        $name_parts = array();
        foreach ($fields as $field) {
          if (isset($account_wrapped->$field) && !empty($account_wrapped->$field->value())) {
            $name_parts[$field] = $account_wrapped->$field->value();
          }
        }
        $display_name = implode(' ', $name_parts);
        db_merge('spbellen_caller')
          ->key(array(
                'caller_id' => $account->uid,
                ))
          ->fields(array(
                'access_type' => $type,
                'first_name' => !empty($account_wrapped->field_first_name) && !empty($account_wrapped->field_first_name->value()) ? $account_wrapped->field_first_name->value() : '',
                'middle_name' => !empty($account_wrapped->field_middle_name) && !empty($account_wrapped->field_middle_name->value()) ? $account_wrapped->field_middle_name->value() : '',
                'last_name' => !empty($account_wrapped->field_last_name) && !empty($account_wrapped->field_last_name->value()) ? $account_wrapped->field_last_name->value() : '',
                'display_name' => $display_name,
                'phone' => !empty($account_wrapped->field_phone_primary) && !empty($account_wrapped->field_phone_primary->value()) ? preg_replace('/[^0-9]/', '', $account_wrapped->field_phone_primary->value()) : '',
                ))
          ->execute();
      }
    }
  }
}

/**
 * Add caller_check  {spbellen_campaign} table.
 */
function spbellen_update_7014() {
  if (!db_field_exists('spbellen_campaign', 'caller_check')) {
    $spec = array(
      'description' => 'Wether to check the caller or not.',
      'type' => 'int',
      'size' => 'tiny',
      'default' => 0,
      'not null' => TRUE,
    );
    db_add_field('spbellen_campaign', 'caller_check', $spec);
  }
}


/**
 * Add campaign start page text to {spbellen_campaign} table.
 */
function spbellen_update_7015() {
  if (!db_field_exists('spbellen_campaign', 'start_page_text')) {
    $spec = array(
      'description' => 'Campaign start page text.',
      'type' => 'text',
      'size' => 'normal',
      'not null' => FALSE,
    );
    db_add_field('spbellen_campaign', 'start_page_text', $spec);
  }
}

/**
 * Add postal_code and afdeling field to {spbellen_caller} table.
 *
 * Add afdeling field to {spbellen_contact_data} table.
 */
function spbellen_update_7016() {
  if (!db_field_exists('spbellen_caller', 'postal_code')) {
    $spec = array(
      'description' => 'Postal code',
      'type' => 'varchar',
      'length' => 255,
    );
    db_add_field('spbellen_caller', 'postal_code', $spec);
  }

  $spec = array(
    'description' => 'Afdeling',
    'type' => 'varchar',
    'length' => 255,
  );
  if (!db_field_exists('spbellen_caller', 'afdeling')) {
    db_add_field('spbellen_caller', 'afdeling', $spec);
  }

  if (!db_field_exists('spbellen_contact_data', 'afdeling')) {
    db_add_field('spbellen_contact_data', 'afdeling', $spec);
  }
}

/**
 * Rename chapter column to afdeling.
 */
function spbellen_update_7017() {
  // Rename chapter column.
  $spec = array(
    'description' => 'Afdeling',
    'type' => 'varchar',
    'length' => 255,
  );
  if (db_field_exists('spbellen_caller', 'chapter')) {
    db_change_field('spbellen_caller', 'chapter', 'afdeling', $spec);
  }
  if (db_field_exists('spbellen_contact_data', 'chapter')) {
    db_change_field('spbellen_contact_data', 'chapter', 'afdeling', $spec);
  }
}

/**
 * Add afdeling_filter to  {spbellen_campaign} table.
 */
function spbellen_update_7018() {
  if (!db_field_exists('spbellen_campaign', 'afdeling_filter')) {
    $spec = array(
      'description' => 'Wether caller contacts are to be filtered on afdelingsregion.',
      'type' => 'int',
      'size' => 'tiny',
      'default' => 0,
      'not null' => TRUE,
    );
    db_add_field('spbellen_campaign', 'afdeling_filter', $spec);
  }
}

/**
 * Add afdeling_id fields to {spbellen_caller}, {spbellen_contact_data} tables.
 */
function spbellen_update_7019() {
  $spec = array(
    'description' => 'Afdeling id',
    'type' => 'int',
    'size' => 'big',
  );
  if (!db_field_exists('spbellen_contact_data', 'afdeling_id')) {
    db_add_field('spbellen_caller', 'afdeling_id', $spec);
  }

  if (!db_field_exists('spbellen_contact_data', 'afdeling_id')) {
    db_add_field('spbellen_contact_data', 'afdeling_id', $spec);
  }
}

/**
 * Set caller_id to user uid (was user name).
 */
function spbellen_update_7020() {

  // Update spbellen_actions table, set caller_id value to user uid.
  $query = "UPDATE {spbellen_action} ac INNER JOIN {users} us ON ac.caller_id = us.name SET ac.caller_id = us.uid";
  $result = db_query($query);

  // Update spbellen_targets table, set caller_id value to user uid.
  $query = "UPDATE {spbellen_targets} ta INNER JOIN {users} us ON ta.caller_id = us.name SET ta.caller_id = us.uid";
  $result = db_query($query);

  // Change caller_id field type from varchar to integer.
  $spec = array(
    'description' => 'Caller uid',
    'type' => 'int',
    'size' => 'big',
  );
  db_change_field('spbellen_action', 'caller_id', 'caller_id', $spec);
  db_change_field('spbellen_targets', 'caller_id', 'caller_id', $spec);
}

/**
 * Removes spnet login accounts that share email with other account.
 */
function spbellen_update_7021() {
  $query = "SELECT uid, name, mail FROM {users} WHERE name > 0";
  $result = db_query($query);
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $uid = $row['uid'];
      $name = $row['name'];
      $email = $row['mail'];
      // Find custom login accounts with same email.
      $query = "SELECT uid, name, mail FROM {users} WHERE mail = :email";
      $result2 = db_query($query, array('email' => $email));
      if ($result2) {
        while ($row2 = $result2->fetchAssoc()) {
          $uid2 = $row2['uid'];
          $name2 = $row2['name'];
          $email2 = $row2['mail'];
          if ($uid2 !== $uid) {

            drupal_set_message('Moving spnet account to custom login account: ' . $uid . ' => ' . $uid2);
            // Change spnet account ref to custom login account ref in action table.
            $query = "UPDATE {spbellen_action} SET caller_id = :uid2 WHERE caller_id = :uid";
            db_query($query, array('uid' => $uid, 'uid2' => $uid2));

            // Change spnet account ref to custom login account ref in targets table.
            $query = "UPDATE {spbellen_targets} SET caller_id = :uid2 WHERE caller_id = :uid";
            db_query($query, array('uid' => $uid, 'uid2' => $uid2));

            // Remove spnet account ref from caller table.
            $query = "DELETE FROM {spbellen_caller} WHERE caller_id = :uid";
            db_query($query, array('uid' => $uid));

            // Remove spnet login user account.
            user_delete($uid);
            break;

          }
        }
      }
    }
  }
}

/**
 * Add click2dial call number to campaign table.
 */
function spbellen_update_7022() {
  if (!db_field_exists('spbellen_campaign', 'click2dial_call_number')) {
    $spec = array(
      'description' => 'Click2dial call number.',
      'type' => 'varchar',
      'length' => 255,
    );
    db_add_field('spbellen_campaign', 'click2dial_call_number', $spec);
  }
}

/**
 * Add notes to contact data table.
 */
function spbellen_update_7024() {
  if (!db_field_exists('spbellen_contact_data', 'notes')) {
    $spec = array(
      'description' => 'Contact notes (serialized) important for caller.',
      'type' => 'text',
      'size' => 'normal',
      'not null' => FALSE,
    );
    db_add_field('spbellen_contact_data', 'notes', $spec);
  }
}

/**
 * Removes spnet login.
 */
function spbellen_update_7025() {
  // Remove CiviCRM call groups from campaign groups table.
  db_delete('spbellen_campaign_groups')
    ->condition('group_type', 'call_group')
    ->execute();

  // Remove SPNET login users.
  $result = db_query("SELECT caller_id FROM {spbellen_caller} WHERE access_type = 'spnet'");
  foreach ($result as $record) {
    user_delete($record->caller_id);
  }

  // Remove spnet login callers from caller table.
  db_delete('spbellen_caller')
    ->condition('access_type', 'spnet')
    ->execute();
}

/**
 * Add call back priority column to spbellen_action table.
 */
function spbellen_update_7026() {
  if (!db_field_exists('spbellen_action', 'call_back_priority')) {
    $spec = array(
      'description' => 'Call back priority.',
      'type' => 'int',
      'size' => 'tiny',
    );
    db_add_field('spbellen_action', 'call_back_priority', $spec);
  }
}

/**
 * Add state column to spbellen_targets table.
 */
function spbellen_update_7027() {
  if (!db_field_exists('spbellen_targets', 'state')) {
    $spec = array(
      'description' => 'State (0 => deleted, 1 => active).',
      'type' => 'int',
      'size' => 'tiny',
      'default' => 1,
      'not null' => TRUE,
    );
    db_add_field('spbellen_targets', 'state', $spec);
  }
}

/**
 * Rename contact_id to crm_contact_id field.
 */
function spbellen_update_7028() {
  // Cleanup targets without contact data.
  db_add_index('spbellen_targets', 'civi_contact_id', array('civi_contact_id'));
  $query = "DELETE ta FROM {spbellen_targets} ta LEFT JOIN {spbellen_contact_data} da ON ta.civi_contact_id = da.contact_id WHERE da.contact_id IS NULL;";
  db_query($query);
  $query = "DELETE ta FROM {spbellen_targets} ta RIGHT JOIN {spbellen_contact_data} da ON ta.civi_contact_id = da.contact_id WHERE ta.id IS NULL;";
  db_query($query);

  // Rename contact_id field to crm_contact_id and create new contact_id field on spbellen_contact_data table.
  db_drop_primary_key('spbellen_contact_data');
  db_change_field('spbellen_contact_data', 'contact_id', 'crm_contact_id', array(
    'type' => 'int',
    'size' => 'big',
  ));

  if (!db_field_exists('spbellen_contact_data', 'contact_id')) {
    db_add_field('spbellen_contact_data', 'contact_id', array(
      'description' => 'Contact id.',
      'type' => 'serial',
      'size' => 'big',
      'not null' => TRUE,
    ), array(
      'primary key' => array(
        'contact_id',
      ),
    ));
  }

  // Alter blacklist table.
  db_add_index('spbellen_blacklist', 'civi_contact_id', array('civi_contact_id'));
  db_drop_primary_key('spbellen_blacklist');
  db_change_field('spbellen_blacklist', 'civi_contact_id', 'crm_contact_id', array(
    'description' => 'CRM contact id.',
    'type' => 'int',
    'size' => 'big',
  ));
  if (!db_field_exists('spbellen_blacklist', 'contact_id')) {
    db_add_field('spbellen_blacklist', 'contact_id', array(
      'description' => 'Contact id.',
      'type' => 'int',
      'size' => 'big',
    ));
  }

  // Add indexes.
  db_add_index('spbellen_blacklist', 'contact_id', array('contact_id'));
  db_add_index('spbellen_contact_data', 'crm_contact_id', array('crm_contact_id'));

  // Add new contact_id data.
  $query = "UPDATE {spbellen_blacklist} xx INNER JOIN {spbellen_contact_data} da ON xx.crm_contact_id = da.crm_contact_id SET xx.contact_id = da.contact_id";
  $result = db_query($query);
  // Remove crm_contact_id field.
  if (db_field_exists('spbellen_blacklist', 'crm_contact_id')) {
    db_drop_field('spbellen_blacklist', 'crm_contact_id');
  }
  // Remove empty values.
  $query = "DELETE FROM {spbellen_blacklist} WHERE contact_id IS NULL";
  $result = db_query($query);

  // Alter targets table.
  db_drop_unique_key('spbellen_targets', 'campaign_target');
  db_change_field('spbellen_targets', 'civi_contact_id', 'crm_contact_id', array(
    'description' => 'CRM contact id.',
    'type' => 'int',
    'size' => 'big',
  ));
  if (!db_field_exists('spbellen_targets', 'contact_id')) {
    db_add_field('spbellen_targets', 'contact_id', array(
      'description' => 'Contact id.',
      'type' => 'int',
      'size' => 'big',
    ));
  }

  // Add indexes.
  db_add_index('spbellen_targets', 'crm_contact_id', array('crm_contact_id'));
  db_add_index('spbellen_targets', 'contact_id', array('contact_id'));

  // Add new contact_id data.
  $query = "UPDATE {spbellen_targets} xx INNER JOIN {spbellen_contact_data} da ON xx.crm_contact_id = da.crm_contact_id SET xx.contact_id = da.contact_id";
  $result = db_query($query);

  // Remove crm_contact_id field.
  if (db_field_exists('spbellen_targets', 'crm_contact_id')) {
    db_drop_field('spbellen_targets', 'crm_contact_id');
  }
  // Add unique key.
  db_add_unique_key('spbellen_targets', 'campaign_contact_id', array('contact_id', 'campaign_id'));

  // Add crm_contact_id to campaign forms.
  $campaigns = spbellen_get_campaigns();
  $webformsync_data = variable_get('spwebformsync_sync_data');
  foreach ($campaigns as $campaign) {
    $webform = entity_load_single('node', $campaign->webform_id);
    if (!empty($webform->webform['components'])) {
      foreach ($webform->webform['components'] as $key => $component) {
        if ($component['form_key'] === 'spbellen_hidden_contact_id') {
          // Store component.
          $original_component = $component;
          // Rename component to spbellen_hidden_crm_contact_id.
          $webform->webform['components'][$key]['form_key'] = 'spbellen_hidden_crm_contact_id';
          $webform->webform['components'][$key]['name'] = 'CRM contact id (verborgen)';
        }
      }
      $max_component_id = max(array_keys($webform->webform['components']));
      // Add contact_id component.
      $webform->webform['components'][$max_component_id + 1] = $original_component;
      $webform->webform['components'][$max_component_id + 1]['cid'] = $max_component_id + 1;
      node_save($webform);
      // Update webformsync settings if available.
      if (!empty($webformsync_data)) {
        if (!empty($webformsync_data[$webform->nid])) {
          $webformsync_data[$webform->nid]['contact_id_component'] = $original_component['cid'];
        }
      }
      // Insert contact_id in webform_submitted_data table.
      $result = db_select('webform_submissions', 'sm')
        ->fields('sm', array('sid'))
        ->condition('nid', $webform->nid)
        ->execute();
      while ($sid = $result->fetchField()) {
        if (!empty($sid)) {
          // Get crm_contact_id.
          $crm_contact_id = db_select('webform_submitted_data', 'sd')
            ->fields('sd', array('data'))
            ->condition('nid', $webform->nid)
            ->condition('sid', $sid)
            ->condition('cid', $original_component['cid'])
            ->execute()->fetchField();
          if (!empty($crm_contact_id)) {
            // Get contact id.
            $contact_id = spbellen_get_contact_id($crm_contact_id);
            if (!empty($contact_id)) {
              db_update('webform_submitted_data')
                ->fields(array(
                  'data' => $contact_id,
                ))
                ->condition('nid', $webform->nid)
                ->condition('sid', $sid)
                ->condition('cid', $max_component_id + 1)
                ->execute();
            }
          }
        }
      }
    }
  }
  variable_set('spwebformsync_sync_data', $webformsync_data);

  // Add indexes.
  db_add_index('spbellen_targets', 'campaign_id', array('campaign_id'));
  db_add_index('spbellen_targets', 'caller_id', array('caller_id'));
  db_add_index('spbellen_targets', 'sync_id', array('sync_id'));

}

/**
 * Add indexes.
 */
function spbellen_update_7029() {
  db_add_index('spbellen_action', 'target_id', array('target_id'));
  db_add_index('spbellen_action', 'caller_id', array('caller_id'));
  db_add_index('spbellen_action', 'timestamp', array('timestamp'));
  db_add_index('spbellen_action', 'webform_submission_id', array('webform_submission_id'));
  db_add_index('spbellen_action', 'call_back_time', array('call_back_time'));

  db_add_index('spbellen_local_access', 'uid', array('uid'));
  db_add_index('spbellen_local_access', 'campaign_id', array('campaign_id'));
  db_add_index('spbellen_local_access', 'hash', array('hash'));
}

/**
 * Add import history.
 */
function spbellen_update_7030() {
  // Add spbelen_import_history table.
  if (!db_table_exists('spbellen_import_history')) {
    $table = array(
      'description' => 'Campaign import history',
      'fields' => array(
        'id' => array(
          'description' => 'Id.',
          'type' => 'serial',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'campaign_id' => array(
          'description' => 'Campaign_id',
          'type' => 'int',
          'size' => 'big',
        ),
        'title' => array(
          'description' => 'Title',
          'type' => 'text',
          'size' => 'normal',
        ),
        'date' => array(
          'description' => 'The moment when the import was finished.',
          'type' => 'int',
          'size' => 'big',
        ),
        'quantity' => array(
          'description' => 'Number of contacts imported',
          'type' => 'int',
          'size' => 'big',
        ),
        'state' => array(
          'description' => 'State (0 => inactive, 1 => active).',
          'type' => 'int',
          'size' => 'tiny',
          'default' => 1,
          'not null' => TRUE,
        ),
        'call_order' => array(
          'description' => 'Sync_id',
          'type' => 'int',
          'size' => 'tiny',
        ),
      ),
      'primary key' => array(
        'id',
      ),
      'indexes' => array(
        'campaign_id' => array('campaign_id'),
        'date' => array('date'),
        'call_order' => array('call_order'),
        'state' => array('state'),
      ),
    );
    db_create_table('spbellen_import_history', $table);
  }

  // Add spbellen_target_import_relation table.
  if (!db_table_exists('spbellen_target_import_relation')) {
    $table = array(
      'description' => 'Target import relation.',
      'fields' => array(
        'id' => array(
          'description' => 'Id.',
          'type' => 'serial',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'target_id' => array(
          'description' => 'Target_id',
          'type' => 'int',
          'size' => 'big',
        ),
        'import_id' => array(
          'description' => 'Import id.',
          'type' => 'int',
          'size' => 'big',
        ),
      ),
      'primary key' => array(
        'id',
      ),
      'unique keys' => array(
        'target_import_id' => array(
          'target_id',
          'import_id',
        ),
      ),
      'indexes' => array(
        'target_id' => array('target_id'),
        'import_id' => array('import_id'),
        'target_import' => array(
          'target_id',
          'import_id',
        ),
      ),
    );
    db_create_table('spbellen_target_import_relation', $table);
  }

  if (db_table_exists('spbellen_campaign_groups')) {
    // Create imports for campaign groups.
    $import_history = array();
    $query = "SELECT id target_id, state, campaign_id FROM  {spbellen_targets}";
    $result = db_query($query);
    foreach ($result as $record) {
      // Check if import history exists.
      if (empty($import_history[$record->campaign_id][$record->state])) {
        // Get import title.
        if ($record->state) {
          // Get campaign groups.
          $query = "SELECT civi_group_id, group_name FROM {spbellen_campaign_groups} WHERE campaign_id = :campaign_id";
          $groups_results = db_query($query, array(':campaign_id' => $record->campaign_id));
          $groups = $groups_results->FetchAllKeyed();
          $import_title = 'Active contacts: ' . implode(', ', $groups);
        }
        else {
          $import_title = 'Inactive contacts';
        }
        // Create import.
        $import_id = db_insert('spbellen_import_history')
          ->fields(array(
            'campaign_id' => $record->campaign_id,
            'date' => time(),
            'state' => $record->state,
            'title' => $import_title,
          ))
          ->execute();
        $import_history[$record->campaign_id][$record->state] = $import_id;
      }
      $import_id = $import_history[$record->campaign_id][$record->state];
      // Create target import relation.
      db_insert('spbellen_target_import_relation')
        ->fields(array(
          'target_id' => $record->target_id,
          'import_id' => $import_id,
        ))
        ->execute();
      // Store quantity.
      if (empty($quantity[$record->campaign_id][$record->state])) {
        $quantity[$record->campaign_id][$record->state] = 1;
      }
      else {
        $quantity[$record->campaign_id][$record->state]++;
      }
    }
    if (!empty($import_history)) {
      foreach ($import_history as $campaign_id => $import_data) {
        foreach (array(0, 1) as $state) {
          if (!empty($import_data[$state])) {
            db_update('spbellen_import_history')
              ->fields(array(
                'quantity' => $quantity[$campaign_id][$state],
              ))
              ->condition('id', $import_data[$state])
              ->execute();
          }
        }
      }
    }
    db_drop_table('spbellen_campaign_groups');
  }
}

/**
 * Add import history block field.
 */
function spbellen_update_7031() {
  if (!db_field_exists('spbellen_import_history', 'block')) {
    $spec = array(
      'description' => 'Block',
      'type' => 'int',
      'size' => 'tiny',
      'default' => 0,
      'not null' => TRUE,
    );
    db_add_field('spbellen_import_history', 'block', $spec);
    db_add_index('spbellen_import_history', 'block', array('block'));
  }
}


/**
 * Renames variable with asterix ip to domain.
 */
function spbellen_update_7032() {
  $asterix_ip = variable_get('spbellen_click2dial_asterix_ip', FALSE);
  if (!empty($asterix_ip)) {
    variable_set('spbellen_click2dial_asterix_domain', $asterix_ip);
  }
  variable_del('spbellen_click2dial_asterix_ip');
}

/**
 * Add regio(_id) fields to {spbellen_caller}, {spbellen_contact_data} tables.
 */
function spbellen_update_7033() {
  $spec = array(
    'description' => 'Regio',
    'type' => 'varchar',
    'length' => 255,
  );

  if (!db_field_exists('spbellen_caller', 'regio')) {
    db_add_field('spbellen_caller', 'regio', $spec);
  }

  if (!db_field_exists('spbellen_contact_data', 'regio')) {
    db_add_field('spbellen_contact_data', 'regio', $spec);
  }

  $spec = array(
    'description' => 'Regio id',
    'type' => 'int',
    'size' => 'big',
  );

  if (!db_field_exists('spbellen_contact_data', 'regio_id')) {
    db_add_field('spbellen_caller', 'regio_id', $spec);
  }

  if (!db_field_exists('spbellen_contact_data', 'regio_id')) {
    db_add_field('spbellen_contact_data', 'regio_id', $spec);
  }
}

/**
 * Adds fields to import history table.
 */
function spbellen_update_7034() {
  $spec = array(
    'description' => 'Name of the importer module',
    'type' => 'varchar',
    'length' => '255',
  );
  if (!db_field_exists('spbellen_import_history', 'importer')) {
    db_add_field('spbellen_import_history', 'importer', $spec);
  }

  $spec = array(
    'description' => 'External group id',
    'type' => 'int',
    'size' => 'big',
  );
  if (!db_field_exists('spbellen_import_history', 'external_group_id')) {
    db_add_field('spbellen_import_history', 'external_group_id', $spec);
  }

  $spec = array(
    'description' => 'Last imported external contact id',
    'type' => 'int',
    'size' => 'big',
  );
  if (!db_field_exists('spbellen_import_history', 'external_last_imported_id')) {
    db_add_field('spbellen_import_history', 'external_last_imported_id', $spec);
  }
}
