<?php

/**
 * Implements hook_install()
 */
function spbellen_install() {
}

/**
 * Implements hook_uninstall()
 */
function spbellen_uninstall() {
  // Remove any variables we created.
  //variable_del('');
}

/**
 * Implements hook_schema().
 */
function spbellen_schema() {
  $schema['spbellen_campaign'] = array(
    'description' => 'Campaign settings',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Campaign title.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'webform_id' => array(
        'description' => 'The webform id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'afdeling_filter' => array(
        'description' => 'Wether caller contacts are filtered on caller afdelingsregion.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'disabled' => array(
        'description' => 'Wether the campaign is disabled.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'campaign_code' => array(
        'description' => 'Campaign code.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'caller_check' => array(
        'description' => 'Wether to check the caller or not.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'intro_text' => array(
        'description' => 'Campaign caller introduction text.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'start_page_text' => array(
        'description' => 'Campaign start page text.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'click2dial_call_number' => array(
        'description' => 'Click2dial call number.',
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(
      'webform_id' => array(
        'webform_id',
      ),
    ),
  );

  $schema['spbellen_campaign_groups'] = array(
    'description' => 'Links campaigns to CiviCRM groups.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'The campaign id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'civi_group_id' => array(
        'description' => 'The CiviCRM group id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'group_name' => array(
        'description' => 'The group name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'group_type' => array(
        'description' => 'Either target_group or call_group',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['spbellen_targets'] = array(
    'description' => 'Target contacts for campaigns.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'description' => 'Contact id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'The campaign id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'last_action_id' => array(
        'description' => 'The id of the last call action performed for this target.',
        'type' => 'int',
        'size' => 'big',
      ),
      'attempts' => array(
        'description' => 'Number of calls made.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'occupied' => array(
        'description' => 'Wether the contact is being called.',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'not null' => TRUE,
      ),
      'date' => array(
        'description' => 'The moment when the target was occupied.',
        'type' => 'int',
        'size' => 'big',
      ),
      'caller_id' => array(
        'description' => 'The civicrm id of the caller.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'state' => array(
        'description' => 'State (0 => deleted, 1 => active).',
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'id',
    ),
    'unique keys' => array(
      'campaign_target' => array(
        'contact_id',
        'campaign_id',
      ),
    ),
    'indexes' => array(
      'contact_id' => array('contact_id'),
      'last_action_id' => array('last_action_id'),
    ),
  );

  $schema['spbellen_action'] = array(
    'description' => 'Actions on target contact for campaign.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'target_id' => array(
        'description' => 'The target id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'caller_id' => array(
        'description' => 'The user id performing the action.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'result' => array(
        'description' => 'Either not_answered, wrong_number, answered_completed, answered_call_back, answered_blacklist.',
        'type' => 'varchar',
        'length' => 255,
        'not_null' => TRUE,
      ),
      'webform_submission_id' => array(
        'description' => 'The webform submission id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'call_back_time' => array(
        'description' => 'Unix timestamp.',
        'type' => 'int',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'call_back_priority' => array(
        'type' => 'int',
        'size' => 'tiny',
      ),
      'caller_message' => array(
        'description' => 'Message for next caller.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      )
    ),
    'primary key' => array(
      'id',
    ),
    'indexes' => array(
      'target_id' => array('target_id'),
    ),
  );

  $schema['spbellen_blacklist'] = array(
    'description' => 'Contacts that should not be called.',
    'fields' => array(
      'contact_id' => array(
        'description' => 'Contact id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array(
      'contact_id',
    ),
  );

  $schema['spbellen_contact_data'] = array(
    'description' => 'Contact data.',
    'fields' => array(
      'contact_id' => array(
        'description' => 'Contact id.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'crm_contact_id' => array(
        'description' => 'Contact id',
        'type' => 'int',
        'size' => 'big',
      ),
      'phone' => array(
        'description' => 'Contact phone number.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'display_name' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email' => array(
        'description' => 'Email address',
        'type' => 'varchar',
        'length' => 255,
      ),
      'street_address'=> array(
        'description' => 'Street address',
        'type' => 'varchar',
        'length' => 255,
      ),
      'postal_code' => array(
        'description' => 'Postal code',
        'type' => 'varchar',
        'length' => 255,
      ),
      'city' => array(
        'description' => 'City',
        'type' => 'varchar',
        'length' => 255,
      ),
      'gender' => array(
        'description' => 'Gender',
        'type' => 'varchar',
        'length' => 255,
       ),
      'is_lid' => array(
        'description' => 'Membership status',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'afdeling' => array(
        'description' => 'Afdeling',
        'type' => 'varchar',
        'length' => 255,
      ),
      'afdeling_id' => array(
        'description' => 'Afdeling id',
        'type' => 'int',
        'size' => 'big',
      ),
      'notes' => array(
        'description' => 'Contact notes important for caller.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      'contact_id',
    ),
    'indexes' => array(
      'crm_contact_id' => array('crm_contact_id'),
    ),
  );

  $schema['spbellen_local_access'] = array(
    'description' => 'Local account campaign access.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Local account user id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'Campaign id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'hash' => array(
        'description' => 'Hash',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  $schema['spbellen_caller'] = array(
    'description' => 'Local account campaign access.',
    'fields' => array(
      'caller_id' => array(
        'description' => 'Caller account id',
        'type' => 'int',
        'size' => 'big',
      ),
      'access_type' => array(
        'description' => 'Caller access type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'Caller state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => 'registered',
      ),
      'first_name' => array(
        'description' => 'First name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'middle_name' => array(
        'description' => 'Middle name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'last_name' => array(
        'description' => 'Last name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'display_name' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'phone' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'postal_code' => array(
        'description' => 'Postal code',
        'type' => 'varchar',
        'length' => 255,
      ),
      'afdeling' => array(
        'description' => 'Afdeling',
        'type' => 'varchar',
        'length' => 255,
      ),
      'afdeling_id' => array(
        'description' => 'Afdeling id',
        'type' => 'int',
        'size' => 'big',
      ),
    ),
    'primary key' => array(
      'caller_id',
    ),
    'unique keys' => array(
      'caller_access' => array(
        'caller_id',
        'access_type',
      ),
    ),
  );

  return $schema;
}

/**
 * Add call again field to {spbellen_action} table.
 */
function spbellen_update_7001() {
  $spec = array(
    'description' => 'Unix timestamp.',
    'type' => 'int',
    'size' => 'big',
    'not null' => FALSE,
  );
  db_add_field( 'spbellen_action', 'call_back_time', $spec);
}

/**
 * Add caller message field to {spbellen_action} table.
 */
function spbellen_update_7002() {
  $spec = array(
    'description' => 'Message for next caller.',
    'type' => 'text',
    'size' => 'normal',
    'not null' => FALSE,
  );
  db_add_field( 'spbellen_action', 'caller_message', $spec);
}

/**
 * Add intro text field to {spbellen_campaign} table.
 */
function spbellen_update_7003() {
  $spec = array(
    'description' => 'Campaign caller introduction text.',
    'type' => 'text',
    'size' => 'normal',
    'not null' => FALSE,
  );
  db_add_field( 'spbellen_campaign', 'intro_text', $spec);
}

/**
 * Add target data to table {spbellen_contact_data} table.
 */
function spbellen_update_7004() {

  $table = array(
    'description' => 'Contact data.',
    'fields' => array(
      'contact_id' => array(
        'description' => 'Contact id',
        'type' => 'int',
        'size' => 'big',
      ),
      'phone' => array(
        'description' => 'Contact phone number.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'display_name' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
      ),
      'email' => array(
        'description' => 'Email address',
        'type' => 'varchar',
        'length' => 255,
      ),
      'street_address'=> array(
        'description' => 'Street address',
        'type' => 'varchar',
        'length' => 255,
      ),
      'postal_code' => array(
        'description' => 'Postal code',
        'type' => 'varchar',
        'length' => 255,
      ),
      'city' => array(
        'description' => 'City',
        'type' => 'varchar',
        'length' => 255,
      ),
      'gender' => array(
        'description' => 'Gender',
        'type' => 'varchar',
        'length' => 255,
       ),
      'is_lid' => array(
        'description' => 'Membership status',
        'type' => 'int',
        'size' => 'tiny',
      ),
    ),
    'primary key' => array(
      'contact_id',
    ),
  );
  db_create_table('spbellen_contact_data', $table);
}

/**
 * Add open_access to  {spbellen_campaign} table.
 */
function spbellen_update_7005() {
  $spec = array(
    'description' => 'Wether open sign up is allowed for the campaign.',
    'type' => 'int',
    'size' => 'tiny',
    'default' => 0,
    'not null' => TRUE,
  );
  db_add_field( 'spbellen_campaign', 'open_access', $spec);
}

/**
 * Add campaign code to  {spbellen_campaign} table.
 */
function spbellen_update_7006() {
  $spec = array(
    'description' => 'Campaign code.',
    'type' => 'varchar',
    'length' => '255',
  );
  db_add_field( 'spbellen_campaign', 'campaign_code', $spec);
}


/**
 * Add local {spbellen_local_access} table.
 */
function spbellen_update_7007() {
  $table = array(
    'description' => 'Local account campaign access.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key.',
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Local account user id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'campaign_id' => array(
        'description' => 'Campaign id.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'hash' => array(
        'description' => 'Hash',
        'type' => 'varchar',
        'length' => '255',
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );
  db_create_table('spbellen_local_access', $table);
}

/**
 * modify caller_id column type from integer to varchar.
 */
function spbellen_update_7008() {
  db_change_field('spbellen_targets', 'caller_id', 'caller_id',
    array(
      'type' => 'varchar',
      'length' => '255',
    )
  );
  db_change_field('spbellen_action', 'caller_id', 'caller_id',
    array(
      'type' => 'varchar',
      'length' => '255',
    )
  );
}

/**
 * Add sync_id {spbellen_targets} table.
 */
function spbellen_update_7009() {
  $spec = array(
    'description' => 'Sync id.',
    'type' => 'int',
    'size' => 'big',
    'not null' => FALSE,
  );
  db_add_field( 'spbellen_targets', 'sync_id', $spec);
}

/*
 * Add campaign title to  {spbellen_campaign} table.
 */
function spbellen_update_7012() {
  $spec = array(
    'description' => 'Campaign title.',
    'type' => 'varchar',
    'length' => '255',
  );
  db_add_field( 'spbellen_campaign', 'title', $spec);
}

/**
 * Add caller {spbellen_caller} table.
 */
function spbellen_update_7013() {
  $table = array(
    'description' => 'Local account campaign access.',
    'fields' => array(
      'caller_id' => array(
        'description' => 'Caller account id',
        'type' => 'int',
        'size' => 'big',
      ),
      'access_type' => array(
        'description' => 'Caller access type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'Caller state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => 'registered',
      ),
      'first_name' => array(
        'description' => 'First name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'middle_name' => array(
        'description' => 'Middle name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'last_name' => array(
        'description' => 'Last name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'display_name' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'phone' => array(
        'description' => 'Display name',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
    ),
    'primary key' => array(
      'caller_id',
    ),
    'unique keys' => array(
      'caller_access' => array(
        'caller_id',
        'access_type',
      ),
    ),
  );

  db_create_table('spbellen_caller', $table);

  // Transfer data for existing users.
  $users = entity_load('user');
  if (!empty($users)) {
    foreach ($users as $account) {
      $sync = FALSE;
      if (
        strpos($account->init, 'spoauth_') !== FALSE
      ) {
        // SPNET access.
        $sync = TRUE;
        $type = 'spnet';
      }
      else {
        // Check if local access.
        $query = new entityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'local_access')
          ->propertyCondition('uid', $account->uid)
          ->execute();
        if (isset($result['local_access'])) {
          $sync = TRUE;
          $type = 'local';
        }
      }
      if ($sync) {
        $account_wrapped = entity_metadata_wrapper('user', $account);
        $fields = array('field_first_name', 'field_middle_name', 'field_last_name');
        $name_parts = array();
        foreach ($fields as $field) {
          if (isset($account_wrapped->$field) && !empty($account_wrapped->$field->value())) {
            $name_parts[$field] = $account_wrapped->$field->value();
          }
        }
        $display_name = implode(' ', $name_parts);
        db_merge('spbellen_caller')
          ->key(array(
                'caller_id' => $account->uid,
                ))
          ->fields(array(
                'access_type' => $type,
                'first_name' => !empty($account_wrapped->field_first_name) && !empty($account_wrapped->field_first_name->value()) ? $account_wrapped->field_first_name->value() : '',
                'middle_name' => !empty($account_wrapped->field_middle_name) && !empty($account_wrapped->field_middle_name->value()) ? $account_wrapped->field_middle_name->value() : '',
                'last_name' => !empty($account_wrapped->field_last_name) && !empty($account_wrapped->field_last_name->value()) ? $account_wrapped->field_last_name->value() : '',
                'display_name' => $display_name,
                'phone' => !empty($account_wrapped->field_phone_primary) && !empty($account_wrapped->field_phone_primary->value()) ? preg_replace('/[^0-9]/', '', $account_wrapped->field_phone_primary->value()) : '',
                ))
          ->execute();
      }
    }
  }
}

/**
 * Add caller_check  {spbellen_campaign} table.
 */
function spbellen_update_7014() {
  $spec = array(
    'description' => 'Wether to check the caller or not.',
    'type' => 'int',
    'size' => 'tiny',
    'default' => 0,
    'not null' => TRUE,
  );
  db_add_field( 'spbellen_campaign', 'caller_check', $spec);
}


/*
 * Add campaign start page text to {spbellen_campaign} table.
 */
function spbellen_update_7015() {
  $spec = array(
    'description' => 'Campaign start page text.',
    'type' => 'text',
    'size' => 'normal',
    'not null' => FALSE,
  );
  db_add_field( 'spbellen_campaign', 'start_page_text', $spec);
}

/*
 * Add postal_code and afdeling field to {spbellen_caller} table.
 * Add afdeling field to {spbellen_contact_data} table.
 */
function spbellen_update_7016() {
  $spec = array(
    'description' => 'Postal code',
    'type' => 'varchar',
    'length' => 255,
  );
  db_add_field( 'spbellen_caller', 'postal_code', $spec);

  $spec = array(
    'description' => 'Afdeling',
    'type' => 'varchar',
    'length' => 255,
  );
  db_add_field( 'spbellen_caller', 'afdeling', $spec);
  db_add_field( 'spbellen_contact_data', 'afdeling', $spec);
}

/*
 * Rename chapter column to afdeling.
 */
function spbellen_update_7017() {
  // Rename chapter column.
  $spec = array(
    'description' => 'Afdeling',
    'type' => 'varchar',
    'length' => 255,
  );
  if (db_field_exists('spbellen_caller', 'chapter')) {
    db_change_field('spbellen_caller', 'chapter', 'afdeling', $spec);
  }
  if (db_field_exists('spbellen_contact_data', 'chapter')) {
    db_change_field('spbellen_contact_data', 'chapter', 'afdeling', $spec);
  }
}

/**
 * Add afdeling_filter to  {spbellen_campaign} table.
 */
function spbellen_update_7018() {
  $spec = array(
    'description' => 'Wether caller contacts are to be filtered on afdelingsregion.',
    'type' => 'int',
    'size' => 'tiny',
    'default' => 0,
    'not null' => TRUE,
  );
  db_add_field( 'spbellen_campaign', 'afdeling_filter', $spec);
}

/**
 * Add afdeling_id fields to {spbellen_caller} and {spbellen_contact_data} tables.
 */
function spbellen_update_7019() {
  $spec = array(
    'description' => 'Afdeling id',
    'type' => 'int',
    'size' => 'big',
  );
  db_add_field( 'spbellen_caller', 'afdeling_id', $spec);
  db_add_field( 'spbellen_contact_data', 'afdeling_id', $spec);
}

/*
 * Set caller_id to user uid (was user name).
 */
function spbellen_update_7020() {

  // Update spbellen_actions table, set caller_id value to user uid.
  $query = "UPDATE {spbellen_action} ac INNER JOIN {users} us ON ac.caller_id = us.name SET ac.caller_id = us.uid";
  $result = db_query($query);

  // Update spbellen_targets table, set caller_id value to user uid.
  $query = "UPDATE {spbellen_targets} ta INNER JOIN {users} us ON ta.caller_id = us.name SET ta.caller_id = us.uid";
  $result = db_query($query);

  // Change caller_id field type from varchar to integer.
  $spec = array(
    'description' => 'Caller uid',
    'type' => 'int',
    'size' => 'big',
  );
  db_change_field('spbellen_action', 'caller_id', 'caller_id', $spec);
  db_change_field('spbellen_targets', 'caller_id', 'caller_id', $spec);
}

/*
 * Removes spnet login accounts that share email with other account.
 */
function spbellen_update_7021() {
  $query = "SELECT uid, name, mail FROM {users} WHERE name > 0";
  $result = db_query($query);
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $uid = $row['uid'];
      $name = $row['name'];
      $email = $row['mail'];
      // Find custom login accounts with same email.
      $query = "SELECT uid, name, mail FROM {users} WHERE mail = :email";
      $result2 = db_query($query, array('email' => $email));
      if ($result2) {
        while ($row2 = $result2->fetchAssoc()) {
          $uid2 = $row2['uid'];
          $name2 = $row2['name'];
          $email2 = $row2['mail'];
          if ($uid2 !== $uid) {

            drupal_set_message('Moving spnet account to custom login account: ' . $uid . ' => ' . $uid2);
            // Change spnet account ref to custom login account ref in action table.
            $query = "UPDATE {spbellen_action} SET caller_id = :uid2 WHERE caller_id = :uid";
            db_query($query, array('uid' => $uid, 'uid2' => $uid2));

            // Change spnet account ref to custom login account ref in targets table.
            $query = "UPDATE {spbellen_targets} SET caller_id = :uid2 WHERE caller_id = :uid";
            db_query($query, array('uid' => $uid, 'uid2' => $uid2));

            // Remove spnet account ref from caller table.
            $query = "DELETE FROM {spbellen_caller} WHERE caller_id = :uid";
            db_query($query, array('uid' => $uid));

            // Remove spnet login user account.
            user_delete($uid);
            break;

          }
        }
      }
    }
  }
}

/**
 * Add click2dial call number to campaign table.
 */
function spbellen_update_7022() {
  $spec = array(
      'description' => 'Click2dial call number.',
      'type' => 'varchar',
      'length' => 255,
      );
  db_add_field( 'spbellen_campaign', 'click2dial_call_number', $spec);
}

/**
 * Add notes to contact data table.
 */
function spbellen_update_7024() {
  $spec = array(
      'description' => 'Contact notes (serialized) important for caller.',
      'type' => 'text',
      'size' => 'normal',
      'not null' => FALSE,
      );
  db_add_field( 'spbellen_contact_data', 'notes', $spec);
}

/**
 * Removes spnet login.
 */
function spbellen_update_7025() {
  // Remove CiviCRM call groups from campaign groups table.
  db_delete('spbellen_campaign_groups')
    ->condition('group_type', 'call_group')
    ->execute();

  // Remove SPNET login users
  $result = db_query("SELECT caller_id FROM {spbellen_caller} WHERE access_type = 'spnet'");
  foreach ($result as $record) {
    user_delete($record->caller_id);
  }

  // Remove spnet login callers from caller table.
  db_delete('spbellen_caller')
    ->condition('access_type', 'spnet')
    ->execute();
}

/**
 * Add call back priority column to spbellen_action table.
 */
function spbellen_update_7026() {
  $spec = array(
    'description' => 'Call back priority.',
    'type' => 'int',
    'size' => 'tiny',
  );
  db_add_field( 'spbellen_action', 'call_back_priority', $spec);
}

/**
 * Add state column to spbellen_targets table.
 */
function spbellen_update_7027() {
  $spec = array(
    'description' => 'State (0 => deleted, 1 => active).',
    'type' => 'int',
    'size' => 'tiny',
    'default' => 1,
    'not null' => TRUE,
  );
  db_add_field( 'spbellen_targets', 'state', $spec);
}

/*
 * Rename contact_id to crm_contact_id field.
 */
function spbellen_update_7028() {
  // Rename contact_id field to crm_contact_id and create new contact_id field on spbellen_contact_data table.
  db_drop_primary_key('spbellen_contact_data');
  db_change_field('spbellen_contact_data', 'contact_id', 'crm_contact_id', array(
    'type' => 'int',
    'size' => 'big',
  ));

  db_add_field( 'spbellen_contact_data', 'contact_id', array(
    'description' => 'Contact id.',
    'type' => 'serial',
    'not null' => TRUE,
  ), array(
    'primary key' => array(
      'contact_id',
    ),
  ));

  // Alter blacklist table.
  db_add_index('spbellen_blacklist', 'civi_contact_id', array('civi_contact_id'));
  db_drop_primary_key('spbellen_blacklist');
  db_change_field('spbellen_blacklist', 'civi_contact_id', 'crm_contact_id', array(
    'description' => 'CRM contact id.',
    'type' => 'int',
    'size' => 'big',
  ));
  db_drop_index('spbellen_blacklist', 'crm_contact_id');
  db_add_field( 'spbellen_blacklist', 'contact_id', array(
    'description' => 'Contact id.',
    'type' => 'int',
    'size' => 'big',
  ));
  // Add new contact_id data.
  $query = "UPDATE {spbellen_blacklist} xx INNER JOIN {spbellen_contact_data} da ON xx.crm_contact_id = da.crm_contact_id SET xx.contact_id = da.contact_id";
  $result = db_query($query);
  db_change_field('spbellen_blacklist', 'contact_id', 'contact_id', array(
    'description' => 'Contact id.',
    'type' => 'int',
    'size' => 'big',
    'not null' => TRUE,
  ));
  // Remove crm_contact_id field.
  db_drop_field('spbellen_blacklist', 'crm_contact_id');
  // Add primary key.
  db_add_primary_key('spbellen_blacklist', array('contact_id'));


  // Alter targets table.
  db_drop_unique_key('spbellen_targets', 'campaign_target');
  db_change_field('spbellen_targets', 'civi_contact_id', 'crm_contact_id', array(
    'description' => 'CRM contact id.',
    'type' => 'int',
    'size' => 'big',
  ));
  db_add_field( 'spbellen_targets', 'contact_id', array(
    'description' => 'Contact id.',
    'type' => 'int',
    'size' => 'big',
  ));
  // Add new contact_id data.
  $query = "UPDATE {spbellen_targets} xx INNER JOIN {spbellen_contact_data} da ON xx.crm_contact_id = da.crm_contact_id SET xx.contact_id = da.contact_id";
  $result = db_query($query);
  db_change_field('spbellen_targets', 'contact_id', 'contact_id', array(
    'description' => 'Contact id.',
    'type' => 'int',
    'size' => 'big',
    'not null' => TRUE,
  ));
  // Remove crm_contact_id field.
  db_drop_field('spbellen_targets', 'crm_contact_id');
  db_add_index('spbellen_targets', 'contact_id', array('contact_id'));
  // Add unique key.
  db_add_unique_key('spbellen_targets', 'campaign_target', array('contact_id', 'campaign_id'));

  // Add crm_contact_id to campaign forms.
  $campaigns = spbellen_get_campaigns();
  $webformsync_data = variable_get('spwebformsync_sync_data');
  foreach ($campaigns as $campaign) {
    $webform = entity_load_single('node', $campaign->webform_id);
    if (!empty($webform->webform['components'])) {
      foreach ($webform->webform['components'] as $key => $component) {
        if ($component['form_key'] === 'spbellen_hidden_contact_id') {
          // Store component.
          $original_component = $component;
          // Rename component to spbellen_hidden_crm_contact_id.
          $webform->webform['components'][$key]['form_key'] = 'spbellen_hidden_crm_contact_id';
          $webform->webform['components'][$key]['name'] = 'CRM contact id (verborgen)';
        }
        $max_component_id = $key;
      }
      // Add contact_id component.
      $webform->webform['components'][$max_component_id + 1] = $original_component;
      $webform->webform['components'][$max_component_id + 1]['cid'] = $max_component_id + 1;
      node_save($webform);
      // Update webformsync settings if available.
      if (!empty($webformsync_data)) {
        if (!empty($webformsync_data[$webform->nid])) {
          $webformsync_data[$webform->nid]['contact_id_component'] = $original_component['cid'];
        }
      }
      // Insert contact_id in webform_submitted_data table.
      $result = db_select('webform_submissions', 'sm')
        ->fields('sm', array('sid'))
        ->condition('nid', $webform->nid)
        ->execute();
      while ($sid = $result->fetchField()) {
        if (!empty($sid)) {
          // Get crm_contact_id.
          $crm_contact_id = db_select('webform_submitted_data', 'sd')
            ->fields('sd', array('data'))
            ->condition('nid', $webform->nid)
            ->condition('sid', $sid)
            ->condition('cid', $original_component['cid'])
            ->execute()->fetchField();
          if (!empty($crm_contact_id)) {
            // Get contact id.
            $contact_id = spbellen_get_contact_id($crm_contact_id);
            if (!empty($contact_id)) {
              db_insert('webform_submitted_data')
                ->fields(array(
                  'nid' => $webform->nid,
                  'sid' => $sid,
                  'cid' => $max_component_id + 1,
                  'data' => $contact_id,
                ))
                ->execute();
            }
          }
        }
      }
    }
  }
  variable_set('spwebformsync_sync_data', $webformsync_data);
}

/**
 * Remove open_access from  {spbellen_campaign} table.
 */
function spbellen_update_7029() {
  db_drop_field( 'spbellen_campaign', 'open_access');
}
