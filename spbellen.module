<?php

/**
 * @file
 * Beltool module file.
 */

module_load_include("inc", "spbellen", "spbellen");
module_load_include('inc', 'webform', 'includes/webform.submissions');
module_load_include('inc', 'pathauto', 'pathauto');

variable_set('user_mail_status_activated_notify', FALSE);

/**
 * Implements hook_menu().
 */
function spbellen_menu() {
  $items = array();

  $items['bellen'] = array(
    'title' => 'SP bellen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_start_page_form'),
    'file' => 'spbellen_start_page_form.inc',
    'access callback' => TRUE,
  );

  $items['bellen/error'] = array(
    'title' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_error_page'),
    'access callback' => TRUE,
  );

  $items['bellen/extensie/%'] = array(
    'page callback' => 'spbellen_set_extension',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/beltool'] = array(
    'title' => 'Beltool',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  $items['admin/beltool/coach'] = array(
    'title' => 'Belcoach',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('spbellen administer callers'),
  );

  $items['admin/beltool/coach/overview'] = array(
    'title' => 'Overzicht belcampagnes',
    'page callback' => 'spbellen_overview',
    'file' => 'spbellen_admin_overview.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => '0',
    'access arguments' => array('spbellen administer callers'),
  );

  $items['admin/beltool/coach/subscribe_callers'] = array(
    'title' => 'Inschrijven bellers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_coach_subscribe_callers_form'),
    'file' => 'spbellen_coach_subscribe_callers_form.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => '1',
    'access arguments' => array('spbellen administer callers'),
  );

  $items['admin/beltool/coach/caller_stats'] = array(
    'title' => 'Beller stats',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_caller_stats_form'),
    'file' => 'spbellen_coach_caller_stats_form.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => '2',
    'access arguments' => array('spbellen administer callers'),
  );

  $items['admin/beltool/coach/call_back_list'] = array(
    'title' => 'Terugbellen contacten',
    'type' => MENU_LOCAL_TASK,
    'weight' => '3',
    'access arguments' => array('spbellen administer callers'),
    'page callback' => 'spbellen_call_back_list',
    'file' => 'spbellen_call_back.inc',
  );

  $items['admin/beltool/coach/call_back/%'] = array(
    'title' => 'Call back contact',
    'page callback' => 'spbellen_call_back_contact',
    'page arguments' => array(4),
    'access arguments' => array('spbellen administer callers'),
    'type' => MENU_CALLBACK,
    'file' => 'spbellen_call_back.inc',
  );

  $items['admin/beltool/config'] = array(
    'title' => 'Configuratie',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('spbellen administer campaigns'),
  );

  $items['admin/beltool/config/campaign'] = array(
    'title' => 'Beheer belcampagnes',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_campaign_form'),
    'file' => 'spbellen_admin_campaign_form.inc',
    'access arguments' => array('spbellen administer campaigns'),
    'weight' => '1',
  );

  $items['admin/beltool/config/import'] = array(
    'title' => 'Importeer contacten',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_import_form'),
    'file' => 'spbellen_import_form.inc',
    'access arguments' => array('spbellen administer campaigns'),
    'weight' => '2',
  );

  $items['admin/beltool/config/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_settings_form'),
    'file' => 'spbellen_admin_settings_form.inc',
    'access arguments' => array('spbellen administer campaigns'),
    'weight' => '3',
  );

  $items['spbellen/contact_search/autocomplete/%/%'] = array(
    'title' => 'SP bellen autocomplete',
    'page callback' => 'spbellen_contact_search_autocomplete',
    'page arguments' => array(3, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'spbellen.inc',
  );

  $campaigns = spbellen_get_campaigns();
  foreach ($campaigns as $campaign) {
    if (empty($campaign->disabled)) {
      $webform = node_load($campaign->webform_id);
      $alias = spbellen_get_campaign_form_alias($campaign->webform_id);
      if ($alias) {
        $items['aanmelden/campagne/' . $alias] = array(
          'title' => 'Aanmelden ' . $webform->title,
          'page callback' => 'drupal_get_form',
          'page arguments' => array('spbellen_subscription_form'),
          'file' => 'spbellen_subscription_form.inc',
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
        );
      }
    }

    $items['aanmelden/bevestig/%'] = array(
      'title' => 'Aanmelding bevestigen',
      'page callback' => 'spbellen_confirm_account',
      'page arguments' => array(2),
      'file' => 'spbellen_subscription_form.inc',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function spbellen_permission() {
  return array(
    'spbellen administer campaigns' => array(
      'title' => 'Beheer belcampagnes',
      'description' => 'Maak nieuwe belcampagnes aan, en bewerk bestaande campagnes.',
    ),
    'spbellen administer callers' => array(
      'title' => 'Beheer bellers',
      'description' => 'Neem contact op met bellers, pas de rechten van bellers aan e.d.',
    ),
    'spbellen view results' => array(
      'title' => 'Bekijk resultaten belcampagnes',
      'description' => 'Bekijk de resultaten van belcampagnes.',
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function spbellen_entity_info() {
  $info = array();
  $info['campaign'] = array(
    'label' => 'Belcampagne',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_campaign',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['target'] = array(
    'label' => 'Doel',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_targets',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['action'] = array(
    'label' => 'Actie',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_action',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['contact_data'] = array(
    'label' => 'Contact data',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_contact_data',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['local_access'] = array(
    'label' => 'Local access',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_local_access',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['caller'] = array(
    'label' => 'Caller data',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_caller',
    'entity keys' => array(
      'id' => 'caller_id',
    ),
    'fieldable' => FALSE,
  );

  $info['import_history'] = array(
    'label' => 'Import history',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_import_history',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function campaign_entity_property_info_alter(&$info) {
  $tables = array(
    'campaign',
    'target',
    'action',
    'contact_data',
    'local_access',
    'caller',
    'import_history',
  );
  foreach ($tables as $table) {
    $properties = &$info[$table]['properties'];
    foreach (array_keys($properties) as $key) {
      if ($key == 'id') {
        continue;
      }
      $properties[$key] += array(
        'setter callback' => 'entity_property_verbatim_set',
      );
    }
  }
}

/**
 * Implements hook node update.
 */
function spbellen_node_update($node) {
  if (spbellen_is_spbellen_form_check($node->nid)) {
    $alias = pathauto_cleanstring($node->title);
    $alias_array = array(
      'source' => 'node/' . $node->nid,
      'alias' => 'bellen/campagne/' . $alias,
    );
    path_save($alias_array);
  }
}

/**
 * Implements hook node delete.
 */
function spbellen_node_delete($node) {
  if ($node->type == 'webform') {
    if (spbellen_is_spbellen_form_check($node->nid)) {
      $campaign_id = spbellen_get_campaign_id($node->nid);
      if (!empty($campaign_id)) {
        // Cleanup campaign.
        entity_delete('campaign', $campaign_id);
      }
    }
  }
}

/**
 * Implements hook entity delete.
 */
function spbellen_entity_delete($entity, $type) {
  if ($type == 'campaign') {
    if (node_load($entity->webform_id)) {
      // Cleanup campaign actions and targets.
      $sql = "SELECT ac.id FROM {spbellen_action} ac INNER JOIN {spbellen_targets} ta ON ac.target_id = ta.id WHERE campaign_id = :campaign_id";
      $result = db_query($sql, array(':campaign_id' => $entity->id));
      if ($result) {
        while ($row = $result->fetchAssoc()) {
          $num_result = db_delete('spbellen_action')
            ->condition('id', $row['id'])
            ->execute();
        }
      }
      $num_result = db_delete('spbellen_targets')
        ->condition('campaign_id', $entity->id)
        ->execute();
      // Delete webform.
      node_delete($entity->webform_id);
      // Clear spbellen forms cache.
      cache_clear_all('spbellen_forms', 'cache');
      drupal_set_message('Campagne data is verwijderd.');
    }
  }
}

/**
 * Implements hook form alter.
 */
function spbellen_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // Check if spbellen form.
  if (!empty($form['#node'])) {
    $nid = $form['#node']->nid;
    if (spbellen_is_spbellen_form($nid)) {
      // Attach css.
      $form['#attached']['css'] = array(
        drupal_get_path('module', 'spbellen') . '/css/spbellen_webform_form.css',
      );
      $campaign = spbellen_get_campaign($nid);
      // Assign target.
      $contact_data = spbellen_assign_target($campaign);
      // Fill data.
      $form['submitted']['valid_test']['#default_value'] = $contact_data['contact_id'];
      $is_old_form = FALSE;
      // Check if an old campaign is used without autocomplete address.
      if (!isset($form['submitted']['contact_data']['spbellen_address'])) {
        $is_old_form = TRUE;
      }
      $contact_fields = spbellen_contact_fields();
      $address_fields = array('postal_code', 'city', 'street_address');
      foreach ($contact_fields as $key => $name) {
        // Set form field values.
        $form['submitted']['spbellen_hidden_' . $key]['#value'] = $contact_data[$key];
        if (in_array($key, $address_fields) && $is_old_form === FALSE) {
          if ($key === 'street_address') {
            $matches = array();
            preg_match('/^(\d*[\w\d \'\-]+)[,\s]+(\d+)\s*([\w\d\-\/]*)$/', $contact_data[$key], $matches);
            $match_count = count($matches);
            if ($match_count > 3) {
              $form['submitted']['contact_data']['spbellen_address']['street_name']['#default_value'] = $matches[1];
              $form['submitted']['contact_data']['spbellen_address']['house_number']['#default_value'] = $matches[2];
              if ($match_count === 4) {
                $form['submitted']['contact_data']['spbellen_address']['house_number']['#default_value'] .= $matches[3];
              }
            }
          }
          else {
            $form['submitted']['contact_data']['spbellen_address'][$key]['#default_value'] = $contact_data[$key];
          }
        }
        else {
          $form['submitted']['contact_data']['spbellen_' . $key]['#default_value'] = $contact_data[$key];
        }
      }
      // Add custom submit and validation function.
      array_unshift($form['#validate'], 'spbellen_custom_webform_validate');
      // Add next button.
      $form['actions']['spbellen_next']  = array(
        '#type' => 'button',
        '#value' => 'Overslaan',
        '#attributes' => array(
          'style' => array('float: right'),
          'onclick' => 'return confirm("Weet je zeker dat je ' . $contact_data['display_name'] . ' wilt overslaan?");',
        ),
      );
    }
  }
}

/**
 * Implements hook webform submission presave.
 */
function spbellen_webform_submission_presave($node, &$submission) {
  if (spbellen_is_spbellen_form($node->nid)) {
    $map = spbellen_component_key_id_map($node);
    if ($submission->data[$map['valid_test']][0] !== $submission->data[$map['spbellen_hidden_contact_id']][0]) {
      global $user;
      $params = array(
        'caller' => $user,
        'call_submission' => $submission,
        'campaign_node' => $node,
      );
      drupal_mail('spbellen', 'inzending_niet_opgeslagen', 'tdgraaff@sp.nl', language_default(), $params);
      $alias = spbellen_get_campaign_form_alias($node->nid);
      $path = 'aanmelden/campagne/' . $alias;
      drupal_goto($path);
    }
  }
}

/**
 * Implements hook webform submission insert.
 */
function spbellen_webform_submission_insert($node, $submission) {
  global $user;
  if (spbellen_is_spbellen_form($node->nid)) {
    if (spbellen_campaign_form_access($node->nid)) {
      $campaign_id = spbellen_get_campaign_id($node->nid);
      $map = spbellen_component_key_id_map($node);

      // Get contact id from form.
      $contact_id = $submission->data[$map['spbellen_hidden_contact_id']][0];

      // Get target id.
      $target_info = spbellen_get_target_info($campaign_id, $contact_id);
      $tid = $target_info['id'];

      // Create action.
      if (!empty($submission->data[$map['call_answered']][0])) {
        $result = $submission->data[$map['call_answered']][0];
      }
      if (!empty($submission->data[$map['target_available']][0])) {
        $result = $submission->data[$map['target_available']][0];
      }
      $call_back_priority = 0;
      if (!empty($submission->data[$map['not_available_today']][0])) {
        // Call back after 6:00 next day.
        $call_back_time = strtotime('tomorrow') + 21600;
      }
      elseif (
        !empty($map['call_appointment']) &&
        !empty($submission->data[$map['call_appointment']][0])
      ) {
        $result = 'call_appointment';
        $call_back_date = $submission->data[$map['call_back_date']][0];
        $call_back_time = $submission->data[$map['call_back_time']][0];

        $t = strptime($call_back_date . ' ' . $call_back_time, '%Y-%m-%d %H:%M:%S');
        $call_back_time = mktime($t['tm_hour'], $t['tm_min'], $t['tm_sec'], $t['tm_mon'] + 1, $t['tm_mday'], $t['tm_year'] + 1900);
        $call_back_priority = 1;
      }
      else {
        // Call back after 90 minutes.
        $call_back_time = time() + 5400;
      }
      if (!empty($submission->data[$map['caller_message']][0])) {
        $caller_message = $submission->data[$map['caller_message']][0];
      }
      else {
        $caller_message = '';
      }
      $action_id = spbellen_create_action($tid, $user->uid, $result, $submission->sid, $call_back_time, $call_back_priority, $caller_message);

      if ($result === 'answered_blacklist') {
        spbellen_blacklist($contact_id);
      }

      // Check if contact information was corrected
      // Create activity with corrected values.
      if ($result === 'wrong_number') {
        global $user;
        $caller = entity_load_single('caller', $user->uid);
        $caller_text = '';
        $caller_text .= '<p>Gegevens beller:<br/>';
        $caller_text .= 'Naam: ' . check_plain($caller->display_name) . '<br/>';
        $caller_text .= 'Email: ' . check_plain($user->mail) . '<br/>';
        $caller_text .= 'Telefoon: ' . check_plain($caller->phone) . '<br/>';
        $caller_text .= 'Afdeling: ' . check_plain($caller->afdeling) . '<br/>';
        $caller_text .= '</p>';

        $crm_contact_id = $submission->data[$map['spbellen_hidden_crm_contact_id']][0];
        $phone = $submission->data[$map['spbellen_hidden_phone']][0];
        $text = '<p>Het telefoonnummer ' . $phone . ' is volgens een vrijwilliger van het belteam niet correct.</p>';
        $text .= $caller_text;
        module_invoke_all('spbellen_process_phone_invalid_message', $crm_contact_id, $text);
      }

      // Disassign target.
      spbellen_disassign_target($tid, $action_id);
    }
  }
}

/**
 * Implements hook user login.
 */
function spbellen_user_login($edit, $account) {
  // Store caller campaign access in session.
  // All access.
  $caller = entity_load_single('caller', $account->uid);
  if (
    (
      $caller !== FALSE &&
      $caller->state === 'master'
    ) ||
    (
      is_array($account->roles) &&
      in_array('admin', array_values($account->roles))
    ) ||
    $account->uid === '1'
  ) {
    $_SESSION['spbellen']['all_access'] = 'all_access';
  }
  else {
    // Local access.
    $query = "SELECT ca.webform_id, la.campaign_id FROM {spbellen_local_access} la INNER JOIN {spbellen_campaign} ca ON la.campaign_id = ca.id WHERE la.uid = :uid";
    $results = db_query($query, array(':uid' => $account->uid));
    if ($results) {
      while ($row = $results->fetchAssoc()) {
        $local_access[$row['webform_id']] = $row['campaign_id'];
      }
      if (!empty($local_access)) {
        $_SESSION['spbellen']['local_access'] = $local_access;
      }
    }
  }
}

/**
 * Implements hook node access.
 */
function spbellen_node_access($node, $op, $account) {
  global $user;
  if ($op === 'view') {
    // Check campaign form access.
    if (!empty($node->nid)) {
      // Check if webform.
      if (!empty($node->webform)) {
        // Check if spbellen form.
        if (spbellen_is_spbellen_form($node->nid)) {
          // Allow beheerders.
          if (in_array('beheerder', $user->roles) || in_array('beheerder (resultaten)', $user->roles)) {
            return NODE_ACCESS_ALLOW;
          }
          // Check session.
          if (spbellen_campaign_form_access($node->nid)) {
            // Check if disabled.
            $campaign = spbellen_get_campaign($node->nid);
            if (!empty($campaign) && !$campaign->disabled) {
              // Campaign not disabled.
              return NODE_ACCESS_ALLOW;
            }
            else {
              // Campaign is disabled.
              return NODE_ACCESS_DENY;
            }
          }
          else {
            // Deny access.
            return NODE_ACCESS_DENY;
          }
        }
        else {
          // Deny access to non belforms.
          return NODE_ACCESS_DENY;
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_block_info().
 */
function spbellen_block_info() {
  $blocks['spbellen_contact_block'] = array(
    'info' => 'SP Bellen contact info',
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['spbellen_search_block'] = array(
    'info' => 'SP Bellen zoek contact',
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['spbellen_campaign_intro_block'] = array(
    'info' => 'SP Bellen campagne introductie tekst',
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function spbellen_block_view($delta = '') {
  $block = array();

  if ($delta === 'spbellen_contact_block' || $delta === 'spbellen_search_block' || $delta === 'spbellen_campaign_intro_block') {
    if (arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2))) {
      $nid = arg(1);
      if (spbellen_is_spbellen_form($nid)) {
        if (spbellen_campaign_form_access($nid)) {
          switch ($delta) {
            case 'spbellen_contact_block':

              $data = spbellen_contact_block_data();

              // Use the cookie library to add variables to js bel button.
              drupal_add_library('system', 'jquery.cookie');

              $jsdata = array();
              if (!empty($data['click2dial'])) {
                $jsdata = array(
                  'spbellen' => array(
                    'click2dial' => $data['click2dial'],
                  ),
                );
              }

              $markup = theme('spbellen_block_theme', $data);
              $module_path = drupal_get_path('module', 'spbellen');
              $block = array(
                'subject' => '',
                'content' => array(
                  '#markup' => $markup,
                  '#attached' => array(
                    'js' => array(
                      array(
                        'type' => 'file',
                        'data' => $module_path . '/js/spbellen_click2dial.js',
                      ),
                      array(
                        'data' => $jsdata,
                        'type' => 'setting',
                      ),
                    ),
                  ),
                ),
              );
              break;

            case 'spbellen_search_block':
              $block = array(
                'subject' => '',
                'content' => spbellen_search_block_content(),
              );
              break;

            case 'spbellen_campaign_intro_block':
              $node = menu_get_object();
              $nid = $node->nid;
              $campaign_id = spbellen_get_campaign_id($nid);
              $campaign = spbellen_get_campaign($nid);
              // Check if start page needs to be shown.
              if (
                // Start page not shown yet.
                empty($_SESSION['spbellen']['start_page_' . $nid . '_shown']) &&
                (
                  // Start page text available.
                  !empty($campaign->start_page_text) ||
                  (
                    // Call2dial location.
                    spbellen_click2dial_location() &&
                    // Extension not set yet.
                    empty($_SESSION['spbellen']['extension_number'])
                  )
                )
              ) {
                // Show start page block.
                $module_path = drupal_get_path('module', 'spbellen');
                $start_page_text = check_markup($campaign->start_page_text, 'filtered_html');
                $form = drupal_get_form('spbellen_campaign_intro_form', $start_page_text, $nid);
                $intro_block_content = drupal_render($form);
                $block = array(
                  'subject' => '',
                  'content' => array(
                    '#markup' => $intro_block_content,
                    '#attached' => array(
                      'css' => array(
                        $module_path . '/css/spbellen_block_overlay.css',
                      ),
                    ),
                  ),
                );
              }
              break;
          }
        }
      }
    }
  }
  return $block;
}

/**
 * Introduction form definition.
 */
function spbellen_campaign_intro_form($form, &$form_state, $content, $nid) {
  $form_state['spbellen_nid'] = $nid;

  // Show intro text.
  if (!empty($content)) {
    // Show intro text.
    $form['spbellen_campaign_intro_content'] = array(
      '#markup' => $content,
    );
  }

  // Show extension form.
  if (spbellen_click2dial_location() && empty($_SESSION['spbellen']['extension_number'])) {
    // Click2dial location.
    $form['spbellen_click2dial_extension'] = array(
      '#type' => 'textfield',
      '#title' => 'Telefoonextensie',
      '#description' => 'De telefoonextensie bestaat uit drie cijfers. Wanneer gebeld wordt met een vaste telefoon, is dit nummer af te lezen op de display van de telefoon. Indien gebeld wordt vanaf een laptop, dan is het nummer te vinden op een sticker, het zijn dan de laatste drie cijfers. Vul dat nummer in het veld hierboven in.',
    );
  }

  // Submit button.
  $form['spbellen_campaign_intro_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Verder',
  );
  return $form;
}

/**
 * Implements hook_form_validate().
 */
function spbellen_campaign_intro_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $regex = '/^[0-9][0-9][0-9]$/';
  if (!empty($values['spbellen_click2dial_extension'])) {
    if (!preg_match($regex, $values['spbellen_click2dial_extension'])) {
      form_set_error('spbellen_click2dial_extension', 'De ingevulde extensie is ongeldig');
    }
  }
}

/**
 * Implements hook_form_submit().
 */
function spbellen_campaign_intro_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  if (!empty($values['spbellen_click2dial_extension'])) {
    // Store extension.
    $_SESSION['spbellen']['extension_number'] = $values['spbellen_click2dial_extension'];
  }
  // Store cookie that start page has been shown.
  $_SESSION['spbellen']['start_page_' . $form_state['spbellen_nid'] . '_shown'] = TRUE;
}

/**
 * Returns search block content.
 */
function spbellen_search_block_content() {
  $form = drupal_get_form('spbellen_contact_search_form');
  $output = drupal_render($form);
  return $output;
}

/**
 * Defines search form.
 */
function spbellen_contact_search_form($form, &$form_state) {
  global $user;
  $form = array();
  if (!empty($form_state['values'])) {
    $values = $form_state['values'];
  }
  // Get webform_id.
  if (empty($form_state['webform_id'])) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $webform_id = arg(1);
      $form_state['webform_id'] = $webform_id;
    }
  }
  else {
    $webform_id = $form_state['webform_id'];
  }
  if (!empty($webform_id)) {
    $form['contact'] = array(
      '#type' => 'textfield',
      '#title' => '',
      '#autocomplete_path' => 'spbellen/contact_search/autocomplete/' . $user->uid . '/' . $webform_id,
    );
    $form['search'] = array(
      '#type' => 'submit',
      '#name' => 'spbellen_search_contact',
      '#value' => 'Ga',
    );
  }
  return $form;
}

/**
 * Validates contact search form.
 */
function spbellen_contact_search_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $target_id_raw = $values['contact'];
  $target_id = spbellen_parse_id_from_select_value($target_id_raw);
  if (empty($target_id)) {
    form_set_error('contact', 'Kies een bestaand contact uit de lijst.');
  }
}

/**
 * Contact search form submission processing.
 */
function spbellen_contact_search_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $target_id_raw = $values['contact'];
  $target_id = spbellen_parse_id_from_select_value($target_id_raw);
  if (!empty($target_id)) {
    // Unclaim current target.
    db_update('spbellen_targets')
      ->fields(array(
        'occupied' => 0,
        'date' => time(),
        'caller_id' => NULL,
      ))
      ->condition('caller_id', $user->uid)
      ->condition('occupied', 1)
      ->execute();

    // Claim new target.
    db_update('spbellen_targets')
      ->fields(array(
        'occupied' => 1,
        'date' => time(),
        'caller_id' => $user->uid,
      ))
      ->condition('id', $target_id)
      ->execute();
  }
}

/**
 * Ajax callback.
 */
function spbellen_contact_search_form_ajax_callback($form, &$form_state) {
  return $form;
}

/**
 * Implements hook_theme().
 */
function spbellen_theme($existing, $type, $theme, $path) {
  // Contact block.
  $contact_fields = spbellen_contact_fields();
  foreach ($contact_fields as $key => $name) {
    $variables[$key] = NULL;
  }
  $variables['history'] = NULL;
  $registry['spbellen_block_theme'] = array(
    'template' => 'spbellen-block',
    'variables' => $variables,
  );

  // Admin overview.
  $variables = array(
    'campaign_stats',
    'general_stats',
  );
  $registry['spbellen_overview_theme'] = array(
    'template' => 'spbellen-overview',
    'variables' => $variables,
  );

  // Coach caller overview.
  $variables = array(
    'general_stats',
  );
  $registry['spbellen_caller_overview_theme'] = array(
    'template' => 'spbellen-caller-overview',
    'variables' => $variables,
  );
  $registry['spbellen_callers_overview_theme'] = array(
    'template' => 'spbellen-callers-overview',
    'variables' => $variables,
  );

  // Call back list.
  $variables = array(
    'call_back_data',
  );
  $registry['spbellen_call_back_list_theme'] = array(
    'template' => 'spbellen-call-back-list',
    'variables' => $variables,
  );

  // Admin campaign form.
  $registry['spbellen_campaign_form'] = array(
    'render element' => 'form',
    'file' => 'spbellen_admin_campaign_form.inc',
  );
  return $registry;
}

/**
 * Error page content.
 */
function spbellen_error_page() {
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => 'Terug naar het belformulier',
    '#prefix' => '<div class="content">',
    '#suffix' => '</div>',
  );
  return $form;
}

/**
 * Error page submission processing.
 */
function spbellen_error_page_submit($form, &$form_state) {
  drupal_goto('bellen');
}

/**
 * Belform custom validation.
 */
function spbellen_custom_webform_validate($form, &$form_state) {
  // Check if submit button or next button.
  if (
    !empty($form_state['triggering_element']['#value']) &&
    $form_state['triggering_element']['#value'] === 'Overslaan'
  ) {
    // Next button.
    global $user;
    // Get target info.
    $campaign_id = spbellen_get_campaign_id($form['#node']->nid);
    $contact_id = $form_state['values']['submitted']['spbellen_hidden_contact_id'];
    $target_info = spbellen_get_target_info($campaign_id, $contact_id);
    if (!empty($target_info)) {
      // Create action.
      spbellen_create_action($target_info['id'], $user->uid, 'skipped', 0, NULL, 0, NULL);
      // Disassign target.
      $result = db_update('spbellen_targets')
        ->fields(array(
          'occupied' => 0,
          'date' => time(),
          'caller_id' => NULL,
        ))
        ->condition('id', $target_info['id'])
        ->execute();
    }
    $path = drupal_get_path_alias('node/' . $form['#node']->nid);
    drupal_goto($path);
  }
  else {
    // Submit button.
    // Check if value is selected for 'call_answered'.
    if (empty($form_state['values']['submitted']['call_answered'])) {
      form_set_error('call_answered', 'Vul een antwoord in!');
    }
  }
}

/**
 * Implements hook_mail().
 */
function spbellen_mail($key, &$message, $params) {
  switch ($key) {
    case 'register_confirmation_required':
      $message['subject'] = 'Bevestig je aanmelding voor: ' . $params['webform_title'];
      $message['body'][] = '<p>Beste ' . $params['name'] . ',</p>';
      $message['body'][] = '<p>Klik op de onderstaande link om je aanmelding te bevestigen.</p>';
      $message['body'][] = '<p><a href="' . $params['url'] . '">' . $params['url'] . '</a></p>';
      $message['body'][] = '<p>Met vriendelijke groet,<br/>' . $params['webform_title'] . '</p>';
      break;

    case 'register_confirmation_success':
      $message['subject'] = 'Je aanmelding voor ' . $params['webform_title'] . ' is bevestigd';
      $message['body'][] = '<p>Beste ' . $params['name'] . ',</p>';
      $message['body'][] = '<p>Je aanmelding voor de belcampagne is bevestigd. Vanaf nu kan je je direct aanmelden op de onderstaande pagina.</p>';
      $message['body'][] = '<p><a href="' . $params['url'] . '">' . $params['url'] . '</a></p>';
      $message['body'][] = '<p>Met vriendelijke groet,<br/>' . $params['webform_title'] . '</p>';
      break;

    case 'inzending_niet_opgeslagen':
      $message['subject'] = 'Beltool: inzending niet opgeslagen';
      $message['body'][] = '<p>User:</p><pre>' . print_r($params['caller'], TRUE) . '</pre>';
      $message['body'][] = '<p>Submission:</p><pre>' . print_r($params['call_submission'], TRUE) . '</pre>';
      $message['body'][] = '<p>Node:</p><pre>' . print_r($params['campaign_node'], TRUE) . '</pre>';
      break;
  }
}

/**
 * Store extenion number in session.
 */
function spbellen_set_extension($extension_number) {
  if (!empty($extension_number)) {
    $regex = '/^[0-9][0-9][0-9]$/';
    if (preg_match($regex, $extension_number)) {
      if (spbellen_click2dial_location()) {
        $_SESSION['spbellen']['extension_number'] = $extension_number;
      }
    }
  }
  drupal_goto('/');
}

/**
 * Generate contact block data.
 */
function spbellen_contact_block_data() {
  global $user;
  $data = array();
  $node = menu_get_object();
  if (spbellen_is_spbellen_form($node->nid)) {
    if (!empty($user->uid)) {
      $campaign = spbellen_get_campaign($node->nid);
      $campaign_id = $campaign->id;

      $contact_data = spbellen_assign_target($campaign);

      if (!empty($contact_data['contact_id'])) {

        // Contact data.
        $contact_id = $contact_data['contact_id'];
        $contact_fields = spbellen_contact_fields();
        foreach ($contact_fields as $key => $name) {
          $data[$key] = !empty($contact_data[$key]) ? check_plain($contact_data[$key]) : '';
        }

        // Add notes.
        $data['notes'] = !empty($contact_data['notes']) ? unserialize($contact_data['notes']) : array();
        foreach ($data['notes'] as $key => $value) {
          $data['notes'][$key] = check_markup($value, 'filtered_html');
        }

        // Call history.
        $translate = spbellen_action_translate();
        $query = "SELECT attempts, timestamp, result, webform_submission_id, caller_message, call_back_priority FROM {spbellen_targets} ta INNER JOIN {spbellen_action} ac ON ta.id = ac.target_id WHERE occupied = 1 AND ta.caller_id = :caller_id AND ta.campaign_id = :cid AND ta.contact_id = :contact_id AND result NOT IN ('not_answered', 'skipped')";
        $result = db_query($query, array(
          ':caller_id' => $user->uid,
          ':cid' => $campaign_id,
          ':contact_id' => $contact_id,
        ));
        if (!empty($result)) {
          while ($row = $result->fetchAssoc()) {
            $date_formatted = format_date($row['timestamp'], 'custom', "D j-n-Y G:i");
            $data['history'][] = array(
              'date' => $date_formatted,
              'result' => $translate[$row['result']],
              'caller_message' => check_plain($row['caller_message']),
              'call_back_priority' => $row['call_back_priority'],
            );
          }
        }

        // Stats.
        $afdeling_id = NULL;
        if (!empty($campaign->afdeling_filter)) {
          $caller = entity_load_single('caller', $user->uid);
          if (!empty($caller->afdeling_id)) {
            $afdeling_id = $caller->afdeling_id;
          }
        }
        $data['stats'] = spbellen_get_campaign_stats($campaign_id, $afdeling_id);

        // Call button.
        $campaign = entity_load_single('campaign', $campaign_id);
        $call_number_list = spbellen_click2dial_call_numbers_list();
        $extension = !empty($_SESSION['spbellen']['extension_number']) ? $_SESSION['spbellen']['extension_number'] : FALSE;
        if ($extension) {
          $asterix_domain = variable_get('spbellen_click2dial_asterix_domain', FALSE);
          $shortname = variable_get('spbellen_click2dial_shortname', FALSE);
          $phone = $contact_data['phone'];
          if (
            !empty($asterix_domain) &&
            !empty($shortname) &&
            !empty($phone)
          ) {
            $params = array(
              'shortname' => $shortname,
              'dest' => $phone,
              'extension' => $extension,
              'username' => 'T' . $extension,
            );
            // Add optional params.
            $forceclip = $campaign->click2dial_call_number;
            if (!empty($forceclip)) {
              $params['forceclip'] = $forceclip;
              $calleridname = empty($call_number_list[$forceclip]) ? '' : $call_number_list[$forceclip];
              if (!empty($calleridname)) {
                $params['callerIDName'] = $calleridname;
              }
            }

            $script_url = 'https://' . $asterix_domain . '/ps/call.php';
            $data['click2dial']['script_params'] = $params;
            $data['click2dial']['script_url'] = $script_url;
          }
        }
      }
    }
  }
  return $data;
}

/**
 * Implements hook_form_alter().
 */
function spbellen_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('administer users')) {
    $fields = array(
      'field_contact_id',
      'field_first_name',
      'field_middle_name',
      'field_last_name',
      'field_initials',
      'field_phone_primary',
      'field_email_primary',
      'field_afdeling',
      'locale',
    );
    foreach ($fields as $field) {
      $form[$field]['#access'] = FALSE;
    }
    $form['account']['mail']['#access'] = FALSE;
  }
  $form['#validate'][] = 'spbellen_user_profile_validate';
}

/**
 * Implements hook_validate().
 */
function spbellen_user_profile_validate($form, &$form_state) {
  $values = $form_state['values'];
  // Validate password.
  $regex_tests = array(
    '[0-9]+' => 'Gebruik tenminste één cijfer in het wachtwoord',
    '[a-z]+' => 'Gebruik tenminste één kleine letter in het wachtwoord',
    '[A-Z]+' => 'Gebruik tenminste één hoofdletter in het wachtwoord',
    '\W+' => 'Gebruik tenminste één teken (bijv. !?+-= e.d.) in het wachtwoord',
  );
  foreach ($regex_tests as $regex => $feedback) {
    if (!preg_match('/' . $regex . '/', $values['pass'])) {
      $pass_feedback_array[] = $feedback;
      $error = TRUE;
      $pass_error = TRUE;
    }
  }
  if (strlen($values['pass']) < 6) {
    $pass_feedback_array[] = 'Het wachtwoord moet minimaal 6 tekens lang zijn';
    $error = TRUE;
    $pass_error = TRUE;
  }
  if (!empty($pass_error)) {
    $pass_feedback = implode('<br/>', $pass_feedback_array);
    form_set_error('pass', $pass_feedback);
  }
}

/**
 * Returns information about spbellen importer modules.
 *
 * @return array
 *   Importer info.
 */
function spbellen_importer_info() {
  $importer_info = &drupal_static(__FUNCTION__);
  if (!isset($importer_info)) {
    $importer_info = array();
    foreach (module_implements('spbellen_importer_info') as $module) {
      $importer_info[$module] = module_invoke($module, 'spbellen_importer_info');
    }
  }
  return $importer_info;
}
