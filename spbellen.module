<?php

  module_load_include("inc", "spbellen", "spbellen");
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  module_load_include('inc', 'pathauto', 'pathauto');

/**
 *  * Implements hook_menu().
 *   */
function spbellen_menu() {
  $items = array();

  $items['bellen'] = array(
    'title' => 'SP bellen',
    'page callback'  => 'spbellen_redirect',
    'access callback' => TRUE,
  );

  $items['bellen/error'] = array(
    'title' => '',
    'page callback'  => 'spbellen_error_page',
    'access callback' => TRUE,
  );

  $items['admin/config/sp/spbellen'] = array(
    'title' => 'SP bellen',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'spbellen_overview',
    'file' => 'spbellen_admin_overview.inc',
    'access callback' => sprbs_access_check(),
  );

  $items['admin/config/sp/spbellen/overview'] = array(
    'title' => 'Overzicht',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '0',
  );

  $items['admin/config/sp/spbellen/campaign'] = array(
    'title' => 'Beheer belcampagnes',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_campaign_form'),
    'file' => 'spbellen_admin_campaign_form.inc',
    'access callback' => sprbs_access_check(),
    'weight' => '1',
  );

  $items['admin/config/sp/spbellen/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_settings_form'),
    'file' => 'spbellen_admin_settings_form.inc',
    'access callback' => sprbs_access_check(),
    'weight' => '2',
  );

  $items['spbellen/group/autocomplete'] = array(
    'title' => 'SP bellen autocomplete',
    'page callback' => 'spbellen_group_autocomplete',
    'access callback' => sprbs_access_check(),
    'type' => MENU_CALLBACK,
    'file' => 'spbellen.inc',
  );


  return $items;
}

/**
 * Implements hook_entity_info().
 */
function spbellen_entity_info() {
  $info = array();
  $info['campaign'] = array(
    'label' => 'Belcampagne',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_campaign',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['campaign_groups'] = array(
    'label' => 'Campagne groepen',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_campaign_groups',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['target'] = array(
    'label' => 'Doel',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_targets',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function campaign_entity_property_info_alter(&$info) {
  $properties = &$info['campaign']['properties'];
  foreach (array_keys($properties) as $key) {
    if ($key == 'id') {
      continue;
    }
    $properties[$key] += array(
      'setter callback' => 'entity_property_verbatim_set',
    );
  }

  $properties = &$info['campaign_groups']['properties'];
  foreach (array_keys($properties) as $key) {
    if ($key == 'id') {
      continue;
    }
    $properties[$key] += array(
      'setter callback' => 'entity_property_verbatim_set',
    );
  }

  $properties = &$info['targets']['properties'];
  foreach (array_keys($properties) as $key) {
    if ($key == 'id') {
      continue;
    }
    $properties[$key] += array(
      'setter callback' => 'entity_property_verbatim_set',
    );
  }
}

function spbellen_node_update($node) {
  if (spbellen_is_spbellen_form_check($node->nid)) {
    $alias = pathauto_cleanstring($node->title);
    $alias_array = array(
      'source' => 'node/'.$node->nid,
      'alias' => 'bellen/campagne/'.$alias,
    );
    path_save($alias_array);
  }
}

function spbellen_node_delete($node) {
  if ($node->type == 'webform') {
    if (spbellen_is_spbellen_form_check($node->nid)) {
      $campaign_id = spbellen_get_campaign_id($node->nid);
      if (!empty($campaign_id)) {
        // Cleanup targets and campaign groups.
        entity_delete('campaign', $campaign_id);
      }
    }
  }
}

function spbellen_entity_delete($entity, $type) { 
  if ($type == 'campaign') {
    // Delete webform.
    if (node_load($entity->webform_id)) {
      node_delete($entity->webform_id);
    }
    // Cleanup targets and campaign groups.
    $sql = "DELETE FROM {spbellen_targets} WHERE campaign_id = :campaign_id";
    $result = db_query($sql, array(':campaign_id' => $entity->id));
    $sql = "DELETE FROM {spbellen_campaign_groups} WHERE campaign_id = :campaign_id";
    $result = db_query($sql, array(':campaign_id' => $entity->id));
    $sql = "DELETE ac FROM {spbellen_action} ac INNER JOIN {spbellen_targets} ta ON ac.target_id = ta.id WHERE campaign_id = :campaign_id";
    $result = db_query($sql, array(':campaign_id' => $entity->id));
    // Clear spbellen forms cache.
    cache_clear_all('spbellen_forms', 'cache');
    drupal_set_message('Campagne data is verwijderd.');
  }
}

function spbellen_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // Check if spbellen form.
  if (!empty($form['#node'])) {
    $nid = $form['#node']->nid;
    if (spbellen_is_spbellen_form($nid)) {
      $campaign_id = spbellen_get_campaign_id($nid);
      // Assign target.
      $contact_data = spbellen_assign_target($campaign_id);
      // Fill data.
      $contact_fields = spbellen_contact_fields();
      foreach ($contact_fields as $key => $name) {
        // Set form field values.
        $form['submitted']['spbellen_hidden_'.$key]['#value'] = $contact_data[$key];
        $form['submitted']['contact_data']['spbellen_'.$key]['#value'] = $contact_data[$key];
      }
    }
  }
}

function spbellen_webform_submission_insert($node, $submission) {
  if (spbellen_is_spbellen_form($node->nid)) {
    global $user;
    $caller = user_load($user->uid);
    $caller_id = $caller->field_contact_id['und'][0]['value'];
    $campaign_id = spbellen_get_campaign_id($node->nid);
    $map = spbellen_component_key_id_map($node);

    // Get civicrm contact id from form.
    $target_contact_id = $submission->data[$map['spbellen_hidden_contact_id']][0];

    // Get target id.
    $query = "SELECT id FROM {spbellen_targets} WHERE target_id = :target_id AND campaign_id = :cid";
    $result = db_query($query, array(':target_id' => $target_contact_id, ':cid' => $campaign_id))->fetchAssoc();
    $tid = $result['id'];

    // Create action.

    if (!empty($submission->data[$map['call_answered']][0])) {
      $result = $submission->data[$map['call_answered']][0];
    }
    if (!empty($submission->data[$map['target_available']][0])) {
      $result = $submission->data[$map['target_available']][0];
    }
    if (!empty($submission->data[$map['voicemail_left_message']][0])) {
      $result = $submission->data[$map['voicemail_left_message']][0];
    }
    spbellen_create_action($tid, $caller_id, $result, $submission->sid);

    $call_back = (in_array($result, array('answered_call_back', 'voicemail_message_callback', 'voicemail_no_message', 'busy'))) ? 1 : 0;

    if ($result === 'answered_blacklist') {
      spbellen_blacklist($target_contact_id);
    }

    // Disassign target.
    spbellen_disassign_target($tid, $call_back);
  }
}

function spbellen_user_login($edit, $account) {
  // Store caller campaign access in session.
  $caller_civi_groups = array();
  $call_groups = array();
  // Check if civicrm id for user is set.
  if (!empty($account->field_contact_id)) {
    // Get caller civi groups.
    set_time_limit(0);
    $spcivi = \SPCivi::getInstance();
    $params = array(
      'contact_id' => $account->field_contact_id['und'][0]['value'],
    );
    $results = $spcivi->api('GroupContact', 'get', $params);
    if (spbellen_check_result($results, 'groepen', 'get', $params)) {
      if (!empty($results['values'])) {
        foreach ($results['values'] as $result) {
          $caller_civi_groups[] = $result['group_id'];
        }
      }
    }
    // Get call groups.
    $query = "SELECT webform_id, civi_group_id FROM {spbellen_campaign_groups} cg INNER JOIN {spbellen_campaign} ca ON cg.campaign_id = ca.id WHERE group_type = 'call_group'";
    $results = db_query($query);
    if ($results) {
      while ($row = $results->fetchAssoc()) {
        $call_groups[$row['webform_id']] = $row['civi_group_id'];
      }
    }
    // Get intersection. 
    $caller_call_groups = array_intersect($call_groups, $caller_civi_groups);
    // Store caller call groups in session.
    $_SESSION['spbellen']['call_groups'] = $caller_call_groups;
  }
}

function spbellen_node_access($node, $op, $account) {
  if ($op === 'view') {
    // Check campaign form access.
    if (!empty($node->nid)) {
      if (spbellen_is_spbellen_form($node->nid)) {
        // Check session for call groups.
        if(spbellen_campaign_form_access($node->nid)) {
          return NODE_ACCESS_ALLOW;
        }
        else {
          return NODE_ACCESS_DENY;
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

function spbellen_error_page() {
  return '<p></p>';
}

/**
 *  * Implements hook_block_info().
 *   */
function spbellen_block_info() {
  $blocks['spbellen_history'] = array(
    'info' => 'Belgeschiedenis',
    //'cache' => DRUPAL_NO_CACHE,
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );

  $blocks['spbellen_contact_data'] = array(
    'info' => 'Contact gegevens',
    //'cache' => DRUPAL_NO_CACHE,
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function spbellen_block_view($delta = '') {
  $block = array();

  if (arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2))) {
    $nid = arg(1);
    if (spbellen_is_spbellen_form($nid)) {
      if (spbellen_campaign_form_access($nid)) {
        switch ($delta) {
        case 'spbellen_history':
          if (spbellen_campaign_form_access($nid)) {
            return array(
              'subject' => 'Belgeschiedenis',
              'content' => spbellen_history_block_content(),
            );
          }
          break;
        case 'spbellen_contact_data':
          return array(
            'subject' => 'Contact gegevens',
            'content' => spbellen_contact_data_block_content(),
          );
          break;
        }
      }
    }
  }
  return $block;
}

function spbellen_history_block_content() {
  global $user;
  $output = '';
  $node = menu_get_object();
  if (spbellen_is_spbellen_form($node->nid)) {
    $caller = user_load($user->uid);
    if (!empty($caller->field_contact_id)) {
      $caller_id = $caller->field_contact_id['und'][0]['value'];
      $campaign_id = spbellen_get_campaign_id($node->nid);
      $translate = spbellen_action_translate();
      $query = "SELECT attempts, timestamp, result, webform_submission_id FROM {spbellen_targets} ta INNER JOIN {spbellen_action} ac ON ta.id = ac.target_id WHERE occupied = 1 AND ta.caller_id = :caller_id AND ta.campaign_id = :cid";
      $result = db_query($query, array(':caller_id' => $caller_id, ':cid' => $campaign_id));
      if (!empty($result)) {
        while ($row = $result->fetchAssoc()) {
          $output .= '<p>';
          $date_formatted = format_date($row['timestamp'], 'custom', "D j-n-Y G:i");
          $output .= $date_formatted.'<br/>';
          $output .= $translate[$row['result']].'<br/>';
          $output .= '</p>';
        }
      }
    }
  }
  return $output;
}

function spbellen_contact_data_block_content() {
  global $user;
  $output = '';
  $node = menu_get_object();
  if (spbellen_is_spbellen_form($node->nid)) {
    $caller = user_load($user->uid);
    if (!empty($caller->field_contact_id)) {
      $caller_id = $caller->field_contact_id['und'][0]['value'];
      $campaign_id = spbellen_get_campaign_id($node->nid);
      $contact_fields = spbellen_contact_fields();
      $query = "SELECT target_id FROM {spbellen_targets} WHERE occupied = 1 AND campaign_id = :cid AND caller_id = :caller_id";
      $result = db_query($query, array(':cid' => $campaign_id, ':caller_id' => $caller_id))->fetchAssoc();
      if (!empty($result['target_id'])) {
        $contact_data = spbellen_get_contact_data_uncached($result['target_id']);
        //drupal_set_message('<pre>'.print_r($contact_data, TRUE).'</pre>');
        $big = array(
          'phone',
          'display_name',
        );
        $output .= '<ul class="spbellen contact_data big">';
        foreach ($big as $key) {
          if (!empty($contact_data[$key])) {
            $output .= '<li>'.check_plain($contact_data[$key]).'</li>';
          }
        }
        $output .= '</ul>';
        $output .= '<ul class="spbellen contact_data">';
        foreach ($contact_fields as $key => $value) {
          if (!empty($contact_data[$key]) && !in_array($key, $big)) {
            $output .= '<li>'.check_plain($contact_data[$key]).'</li>';
          }
        }
        $output .= '</ul>';
      }
    }
  }
  return $output;
}

function spbellen_cron() {
  cache_clear_all('spbellen_contact_data', 'cache');
}

function spbellen_redirect() {
  $active_campaign = entity_load_single('campaign', variable_get('spbellen_active_campaign', FALSE));
  if ($active_campaign) {
    $path = drupal_get_path_alias('node/' . $active_campaign->webform_id);
    drupal_goto($path);
  }
  else {
    drupal_set_message('Er is geen actieve campagne ingesteld.', 'error');
    drupal_goto('bellen/error');
  }
}
