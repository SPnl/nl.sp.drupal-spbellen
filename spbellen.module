<?php

  module_load_include("inc", "spbellen", "spbellen");
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  module_load_include('inc', 'pathauto', 'pathauto');

/**
 *  * Implements hook_menu().
 *   */
function spbellen_menu() {
  $items = array();

  $items['bellen'] = array(
    'title' => 'SP bellen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_campaign_selection_form'),
    'access callback' => TRUE,
  );

  $items['bellen/error'] = array(
    'title' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_error_page'),
    'access callback' => TRUE,
  );

  $items['admin/config/sp/spbellen'] = array(
    'title' => 'SP bellen',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'spbellen_overview',
    'file' => 'spbellen_admin_overview.inc',
    'access callback' => 'user_is_logged_in',
  );

  $items['admin/config/sp/spbellen/overview'] = array(
    'title' => 'Overzicht',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '0',
    'access callback' => 'user_is_logged_in',
  );

  $items['admin/config/sp/spbellen/campaign'] = array(
    'title' => 'Beheer belcampagnes',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_campaign_form'),
    'file' => 'spbellen_admin_campaign_form.inc',
    'access callback' => 'sprbs_access_check',
    'weight' => '1',
  );

  $items['admin/config/sp/spbellen/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spbellen_settings_form'),
    'file' => 'spbellen_admin_settings_form.inc',
    'access callback' => 'sprbs_access_check',
    'weight' => '2',
  );

  $items['spbellen/group/autocomplete'] = array(
    'title' => 'SP bellen autocomplete',
    'page callback' => 'spbellen_group_autocomplete',
    'access callback' => 'sprbs_access_check',
    'type' => MENU_CALLBACK,
    'file' => 'spbellen.inc',
  );

  $items['spbellen/contact_search/autocomplete/%/%'] = array(
    'title' => 'SP bellen autocomplete',
    'page callback' => 'spbellen_contact_search_autocomplete',
    'page arguments' => array(3, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'spbellen.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function spbellen_entity_info() {
  $info = array();
  $info['campaign'] = array(
    'label' => 'Belcampagne',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_campaign',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['campaign_groups'] = array(
    'label' => 'Campagne groepen',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_campaign_groups',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['target'] = array(
    'label' => 'Doel',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_targets',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  $info['action'] = array(
    'label' => 'Actie',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'spbellen_action',
    'entity keys' => array(
      'id' => 'id',
    ),
    'fieldable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function campaign_entity_property_info_alter(&$info) {
  $tables = array(
    'campaign',
    'campaign_groups',
    'target',
    'action',
  );
  foreach ($tables as $table) {
    $properties = &$info[$table]['properties'];
    foreach (array_keys($properties) as $key) {
      if ($key == 'id') {
        continue;
      }
      $properties[$key] += array(
        'setter callback' => 'entity_property_verbatim_set',
      );
    }
  }
}

function spbellen_node_update($node) {
  if (spbellen_is_spbellen_form_check($node->nid)) {
    $alias = pathauto_cleanstring($node->title);
    $alias_array = array(
      'source' => 'node/'.$node->nid,
      'alias' => 'bellen/campagne/'.$alias,
    );
    path_save($alias_array);
  }
}

function spbellen_node_delete($node) {
  if ($node->type == 'webform') {
    if (spbellen_is_spbellen_form_check($node->nid)) {
      $campaign_id = spbellen_get_campaign_id($node->nid);
      if (!empty($campaign_id)) {
        // Cleanup targets and campaign groups.
        entity_delete('campaign', $campaign_id);
      }
    }
  }
}

function spbellen_entity_delete($entity, $type) { 
  if ($type == 'campaign') {
    if (node_load($entity->webform_id)) {
      // Cleanup campaign actions, targets and campaign groups.
      $sql = "SELECT ac.id FROM {spbellen_action} ac INNER JOIN {spbellen_targets} ta ON ac.target_id = ta.id WHERE campaign_id = :campaign_id";
      $result = db_query($sql, array(':campaign_id' => $entity->id));
      if ($result) {
        while($row = $result->fetchAssoc()) {
          $num_result = db_delete('spbellen_action')
            ->condition('id', $row['id'])
            ->execute();
        }
      }
      $num_result = db_delete('spbellen_campaign_groups')
        ->condition('campaign_id', $entity->id)
        ->execute();
      $num_result = db_delete('spbellen_targets')
        ->condition('campaign_id', $entity->id)
        ->execute();
      // Delete webform.
      node_delete($entity->webform_id);
      // Clear spbellen forms cache.
      cache_clear_all('spbellen_forms', 'cache');
      drupal_set_message('Campagne data is verwijderd.');
    }
  }
}

function spbellen_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  // Check if spbellen form.
  if (!empty($form['#node'])) {
    $nid = $form['#node']->nid;
    if (spbellen_is_spbellen_form($nid)) {
      $campaign_id = spbellen_get_campaign_id($nid);
      // Assign target.
      $contact_data = spbellen_assign_target($campaign_id);
      // Fill data.
      $contact_fields = spbellen_contact_fields();
      foreach ($contact_fields as $key => $name) {
        // Set form field values.
        $form['submitted']['spbellen_hidden_'.$key]['#value'] = $contact_data[$key];
        $form['submitted']['contact_data']['spbellen_'.$key]['#default_value'] = $contact_data[$key];
      }
      // Add custom submit and validation function.
      $form['#validate'][] = 'spbellen_custom_webform_validate';
      // Add next button.
      $form['actions']['spbellen_next']  = array(
        '#type' => 'button',
        '#value' => 'Overslaan',
        '#attributes' => array('style' => array('float: right')),
      );
    }
  }
}

function spbellen_webform_submission_insert($node, $submission) {
  global $user;
  if (spbellen_is_spbellen_form($node->nid)) {
    if (spbellen_campaign_form_access($node->nid)) {
      $caller = user_load($user->uid);
      $caller_id = $caller->field_contact_id['und'][0]['value'];
      $campaign_id = spbellen_get_campaign_id($node->nid);
      $map = spbellen_component_key_id_map($node);

      // Get civicrm contact id from form.
      $target_contact_id = $submission->data[$map['spbellen_hidden_contact_id']][0];

      // Get target id.
      $query = "SELECT id FROM {spbellen_targets} WHERE civi_contact_id = :civi_contact_id AND campaign_id = :cid";
      $result = db_query($query, array(':civi_contact_id' => $target_contact_id, ':cid' => $campaign_id))->fetchAssoc();
      $tid = $result['id'];

      // Create action.

      if (!empty($submission->data[$map['call_answered']][0])) {
        $result = $submission->data[$map['call_answered']][0];
      }
      if (!empty($submission->data[$map['target_available']][0])) {
        $result = $submission->data[$map['target_available']][0];
      }
      if (!empty($submission->data[$map['not_available_today']][0])) {
        $call_back_time = strtotime('tomorrow') + 21600; // Call back after 6:00 next day.
      }
      else {
        $call_back_time = time() + 2700; // Call back after 45 minutes.
      }
      if (!empty($submission->data[$map['caller_message']][0])) {
        $caller_message = $submission->data[$map['caller_message']][0];
      }
      else {
        $caller_message = '';
      }
      $action_id = spbellen_create_action($tid, $caller_id, $result, $submission->sid, $call_back_time, $caller_message);

      if ($result === 'answered_blacklist') {
        spbellen_blacklist($target_contact_id);
      }

      // Check if contact information was corrected.
      $correction = FALSE;
      $params = array();
      $contact_fields =  spbellen_no_correct_contact_fields();
      $data = $submission->data;
      foreach ($contact_fields as $field_key => $field_name) {
        if (
          !empty($data[$map['spbellen_hidden_'.$field_key]][0]) &&
          !empty($data[$map['spbellen_'.$field_key]][0]) &&
          $data[$map['spbellen_hidden_'.$field_key]][0] !== $data[$map['spbellen_'.$field_key]][0]
        ) {
          $correction = TRUE; 
          $params['correction_lines'][] = 'Orginele waarde '.$field_name.': '.$data[$map['spbellen_hidden_'.$field_key]][0];
          $params['correction_lines'][] = 'Gecorrigeerde waarde '.$field_name.': '.$data[$map['spbellen_'.$field_key]][0];
          $params['correction_lines'][] = '';
        }
      }
      // Send mail with corrected values.
      $corrections_email = variable_get('spbellen_corrections_email_address', '');
      if ($correction && !empty($corrections_email)) {
        $params['contact_id'] = $data[$map['spbellen_hidden_contact_id']][0];
        drupal_mail('spbellen', 'spbellen_correct', $corrections_email, language_default(), $params, 'webmaster@sp.nl');
      }

      // Check if wrong number.
      if ($result === 'wrong_number') {
        $corrections_email = variable_get('spbellen_corrections_email_address', '');
        if (!empty($corrections_email)) {
          $params['contact_id'] = $data[$map['spbellen_hidden_contact_id']][0];
          $params['phone'] = $data[$map['spbellen_hidden_phone']][0];
          drupal_mail('spbellen', 'spbellen_wrong_number', $corrections_email, language_default(), $params, 'webmaster@sp.nl');
        }
      }

      // Disassign target.
      spbellen_disassign_target($tid, $action_id);
    }
  }
}

function spbellen_user_login($edit, $account) {
  // Store caller campaign access in session.
  $caller_civi_groups = array();
  $call_groups = array();
  // Check if civicrm id for user is set.
  if (!empty($account->field_contact_id)) {
    // Get caller civi groups.
    set_time_limit(0);
    $spcivi = \SPCivi::getInstance();
    $params = array(
      'contact_id' => $account->field_contact_id['und'][0]['value'],
    );
    $results = $spcivi->api('GroupContact', 'get', $params);
    if (spbellen_check_result($results, 'groepen', 'get', $params)) {
      if (!empty($results['values'])) {
        foreach ($results['values'] as $result) {
          $caller_civi_groups[] = $result['group_id'];
        }
      }
    }
    // Get call groups.
    $query = "SELECT webform_id, civi_group_id FROM {spbellen_campaign_groups} cg INNER JOIN {spbellen_campaign} ca ON cg.campaign_id = ca.id WHERE group_type = 'call_group'";
    $results = db_query($query);
    if ($results) {
      while ($row = $results->fetchAssoc()) {
        $call_groups[$row['webform_id']] = $row['civi_group_id'];
      }
    }
    // Get intersection. 
    $caller_call_groups = array_intersect($call_groups, $caller_civi_groups);
    // Store caller call groups in session.
    $_SESSION['spbellen']['call_groups'] = $caller_call_groups;
  }
}

function spbellen_node_access($node, $op, $account) {
  global $user;
  if ($op === 'view') {
    // Check campaign form access.
    if (!empty($node->nid)) {
      // Check if webform.
      if (!empty($node->webform)) {
        // Check if spbellen form.
        if (spbellen_is_spbellen_form($node->nid)) {
          // Allow beheerders.
          if (in_array('beheerder', $user->roles)) {
            return NODE_ACCESS_ALLOW;
          }
          // Check session for call groups.
          if(spbellen_campaign_form_access($node->nid)) {
            // Check if disabled.
            $campaign = spbellen_get_campaign($node->nid);
            if (!empty($campaign) && !$campaign->disabled) {
              // Campaign not disabled.
              return NODE_ACCESS_ALLOW;
            }
            else {
              // Campaign is disabled.
              return NODE_ACCESS_DENY;
            }
          }
          else {
            // Deny access when not in callgroup.
            return NODE_ACCESS_DENY;
          }
        }
        else {
          // Deny access to non belforms.
          return NODE_ACCESS_DENY;
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 *  * Implements hook_block_info().
 *   */
function spbellen_block_info() {
  $blocks['spbellen_contact_block'] = array(
    'info' => 'SP Bellen contact info',
    //'cache' => DRUPAL_NO_CACHE,
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['spbellen_search_block'] = array(
    'info' => 'SP Bellen zoek contact',
    //'cache' => DRUPAL_NO_CACHE,
    'pages' => "bellen/campagne/*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function spbellen_block_view($delta = '') {
  $block = array();

  if ($delta === 'spbellen_contact_block' || $delta === 'spbellen_search_block') {
    if (arg(0) == 'node' && is_numeric(arg(1)) && is_null(arg(2))) {
      $nid = arg(1);
      if (spbellen_is_spbellen_form($nid)) {
        if (spbellen_campaign_form_access($nid)) {
          switch ($delta) {
          case 'spbellen_contact_block':
            $block = array(
              'subject' => '',
              'content' => spbellen_contact_block_content(),
            );
            break;
          case 'spbellen_search_block':
            $block = array(
              'subject' => '',
              'content' => spbellen_search_block_content(),
            );
            break;
          }
        }
      }
    }
  }
  return $block;
}

function spbellen_contact_block_content() {
  global $user;
  $output = '';
  $node = menu_get_object();
  if (spbellen_is_spbellen_form($node->nid)) {
    $caller = user_load($user->uid);
    if (!empty($caller->field_contact_id)) {
      $caller_id = $caller->field_contact_id['und'][0]['value'];
      $campaign_id = spbellen_get_campaign_id($node->nid);

      $query = "SELECT civi_contact_id FROM {spbellen_targets} WHERE occupied = 1 AND campaign_id = :cid AND caller_id = :caller_id";
      $result = db_query($query, array(':cid' => $campaign_id, ':caller_id' => $caller_id))->fetchAssoc();
      if (!empty($result['civi_contact_id'])) {

        // Contact data.
        $contact_data = spbellen_get_contact_data($result['civi_contact_id']);
        $contact_fields = spbellen_contact_fields();
        foreach ($contact_fields as $key => $name) {
          $data[$key] = !empty($contact_data[$key]) ? check_plain($contact_data[$key]) : '';
        }

        //Call history.
        $translate = spbellen_action_translate();
        $query = "SELECT attempts, timestamp, result, webform_submission_id, caller_message FROM {spbellen_targets} ta INNER JOIN {spbellen_action} ac ON ta.id = ac.target_id WHERE occupied = 1 AND ta.caller_id = :caller_id AND ta.campaign_id = :cid";
        $result = db_query($query, array(':caller_id' => $caller_id, ':cid' => $campaign_id));
        if (!empty($result)) {
          while ($row = $result->fetchAssoc()) {
            $date_formatted = format_date($row['timestamp'], 'custom', "D j-n-Y G:i");
            $data['history'][] = array(
              'date' => $date_formatted,
              'result' => $translate[$row['result']],
              'caller_message' => check_plain($row['caller_message']),
            );
          }
        }

        // Stats
        $stats = spbellen_get_campaign_stats($campaign_id);
        $data['stats'] = $stats;

        $output = theme('spbellen_block_theme', $data);
      }
    }
  }
  return $output;
}

function spbellen_search_block_content() {
  $form = drupal_get_form('spbellen_contact_search_form');
  $output = drupal_render($form);
  return $output;
}

function spbellen_contact_search_form($form, &$form_state) {
  global $user;
  $form = array();
  if (!empty($form_state['values'])) {
    $values = $form_state['values'];
  }
  // Get webform_id.
  if (empty($form_state['webform_id'])) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $webform_id = arg(1);
      $form_state['webform_id'] = $webform_id;
    }
  }
  else {
    $webform_id = $form_state['webform_id'];
  }
  if (!empty($webform_id)) {
    $form['contact'] = array(
      '#type' => 'textfield',
      '#title' => 'Zoek contact',
      '#autocomplete_path' => 'spbellen/contact_search/autocomplete/' . $user->name . '/' . $webform_id,
    );
    $form['search'] = array(
      '#type' => 'submit',
      '#name' => 'spbellen_search_contact',
      '#value' => 'Ga',
    );
  }
  return $form;
}

function spbellen_contact_search_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $target_id_raw = $values['contact'];
  $target_id = spbellen_parse_id_form_select_value($target_id_raw);
  if (empty($target_id)) {
    form_set_error('contact', 'Kies een bestaand contact uit de lijst.');
  }
}

function spbellen_contact_search_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $target_id_raw = $values['contact'];
  $target_id = spbellen_parse_id_form_select_value($target_id_raw);
  if (!empty($target_id)) {
    // Unclaim current target.
    db_update('spbellen_targets')
      ->fields(array(
        'occupied' => 0,
        'date' => time(),
        'caller_id' => NULL,
      ))
      ->condition('caller_id', $user->name)
      ->condition('occupied', 1)
      ->execute();

    // Claim new target.
    db_update('spbellen_targets')
      ->fields(array(
        'occupied' => 1,
        'date' => time(),
        'caller_id' => $user->name,
      ))
      ->condition('id', $target_id)
      ->execute();
  }
}

function spbellen_contact_search_form_ajax_callback($form, &$form_state) {
  return $form;
}

function spbellen_campaign_selection_form($form, &$form_state) {
  $form = array();
  $campaigns = spbellen_get_campaigns();
  $campaign_list = array();
  foreach ($campaigns as $campaign) {
    if (!empty($campaign->webform_id) && $campaign->disabled == 0) {
      if (spbellen_campaign_form_access($campaign->webform_id)) {
        $webform = entity_load_single('node', $campaign->webform_id);
        $campaign_list[$campaign->webform_id] = $webform->title;
      }
    }
  }
  // If only one campaign, go there directly.
  if (count($campaign_list) === 1) {
    $path = drupal_get_path_alias('node/' . key($campaign_list));
    drupal_goto($path);
  }
  // Otherwise show selection form.
  if (!empty($campaign_list)) {
    $form['campaign'] = array(
      '#type' => 'select',
      '#title' => 'Selecteer een belcampagne:',
      '#options' => $campaign_list,
      '#required' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Selecteer',
    );
  }
  else {
    $form['no_campaigns'] = array(
      '#markup' => '<p>Er is geen campagne beschikbaar.</p>',
    );
  }
  return $form;
}

function spbellen_campaign_selection_form_submit($form, &$form_state) {
  $path = drupal_get_path_alias('node/' . $form_state['values']['campaign']);
  drupal_goto($path);
}

/**
 * Implements hook_theme().
 */
function spbellen_theme($existing, $type, $theme, $path) {
  $contact_fields = spbellen_contact_fields();
  foreach ($contact_fields as $key => $name) {
    $variables[$key] = NULL;
  }
  $variables['history'] = NULL;
  $registry['spbellen_block_theme'] = array(
    'template' => 'spbellen-block',
    'variables' => $variables,
  );
  $variables = array(
    'campaign_stats',
  );
  $registry['spbellen_overview_theme'] = array(
    'template' => 'spbellen-overview',
    'variables' => $variables,
  );
  return $registry;
}

function spbellen_error_page() {
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => 'Terug naar het belformulier',
    '#prefix' => '<div class="content">',
    '#suffix' => '</div>',
  );
  return $form;
}

function spbellen_error_page_submit($form, &$form_state) {
  drupal_goto('bellen');
}

function spbellen_custom_webform_validate($form, &$form_state) {
  // Check if submit button or next button.
  if (
    !empty($form_state['triggering_element']['#value']) &&
    $form_state['triggering_element']['#value'] === 'Overslaan'
  ) {
    // Next button.
    // Disassign target from caller.
    global $user;
    $caller = user_load($user->uid);
    $caller_id = $caller->field_contact_id['und'][0]['value'];
    $result = db_update('spbellen_targets')
      ->fields(array(
        'occupied' => 0,
        'date' => time(),
        'caller_id' => NULL,
      ))  
      ->condition('caller_id', $caller_id)
      ->execute();
    $path = drupal_get_path_alias('node/' . $form['#node']->nid);
    drupal_goto($path);
  }
  else if (
    !empty($form_state['triggering_element']['#value']) &&
    $form_state['triggering_element']['#value'] === 'Verder'
  ) {
    // Submit button.
    // Check if value is selected for 'call_answered'.
    if (empty($form_state['values']['submitted']['call_answered'])) {
      form_set_error('call_answered', 'Vul een antwoord in!');
    }
  }
}

function spbellen_mail($key, &$message, $params) {
  switch ($key) {
  case 'spbellen_correct':
    $message['subject'] = 'Correctie gegevens CiviCRM contact';
    $message['body'][] = 'Beste,';
    $message['body'][] = 'Een belteam vrijwilliger heeft een correctie van contactgegevens doorgegeven.';
    $message['body'][] = 'CiviCRM contact id: ' . $params['contact_id'];
    $message['body'][] = '';
    if (!empty($params['correction_lines'])) {
      foreach ($params['correction_lines'] as $line) {
        $message['body'][] = $line;
      }
    }
    $message['body'][] = 'Passen jullie deze indien nodig aan in CiviCRM?';
    $message['body'][] = 'Thx, SP Webteam';
    $message['body'][] = '(Dit is een automatisch gegenereerd bericht)';
    break;
  case 'spbellen_wrong_number':
    $message['subject'] = 'Correctie gegevens CiviCRM contact';
    $message['body'][] = 'Beste,';
    $message['body'][] = 'Een belteam vrijwilliger heeft aangegeven dat het telefoonnummer niet correct is.';
    $message['body'][] = 'CiviCRM contact id: ' . $params['contact_id'];
    $message['body'][] = 'Telefoonnummer: ' . $params['phone'];
    $message['body'][] = '';
    $message['body'][] = 'Passen jullie het telefoonnummer indien nodig aan in CiviCRM?';
    $message['body'][] = 'Thx, SP Webteam';
    $message['body'][] = '(Dit is een automatisch gegenereerd bericht)';
    break;
  }
}
