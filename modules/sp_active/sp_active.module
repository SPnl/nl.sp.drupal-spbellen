<?php

/**
 * @file
 * Webform SP active webform component.
 */

/**
 * Implements hook_webform_component_info().
 */
function sp_active_webform_component_info() {
  $components = array();

  $components['sp_active'] = array(
    'label' => 'SP actief formulier',
    'description' => 'Voegt een formulier toe waarmee de mate van activiteit voor de SP kan worden aangegeven.',
    'features' => array(
      'analysis' => FALSE,
      'csv' => TRUE,
      'required' => TRUE,
      'sp_active' => TRUE,
      'conditional' => TRUE,
      'title_display' => TRUE,
      'title_inline' => TRUE,
      'private' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
  );

  return $components;
}

/**
 * Implements _webform_defaults_component().
 */
function _webform_defaults_sp_active() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'required' => FALSE,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'key' => '',
      'secret' => '',
      'private' => FALSE,
    ),
  );
}

/**
 * Implements _webform_edit_component().
 */
function _webform_edit_sp_active($component) {
  $form = array();

  return $form;
}

/**
 * Implements _webform_render_component().
 */
function _webform_render_sp_active($component) {
  // Wrap the form in a container, in order to correctly apply the weight.
  $elements = array(
    '#type' => 'container',
    '#title' => $component['name'],
    '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
    '#weight' => $component['weight'],
    '#theme_wrappers' => array('webform_element'),
    '#webform_component' => $component,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'sp_active') . '/css/sp_active.css',
      ),
    ),
  );

  $active_options = sp_active_get_active_options();
  $activity_options = sp_active_get_activity_options();

  $elements['active'] = array(
    '#type' => 'radios',
    '#title' => 'Actief',
    '#options' => $active_options,
    '#required' => $component['required'],
    '#webform_component' => array('type' => $component['type'] . '_active') + $component,
  );

  $elements['activities'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Activiteiten',
    '#options' => $activity_options,
    '#required' => FALSE,
    '#webform_component' => array('type' => $component['type'] . '_activities') + $component,
  );

  return $elements;
}

/**
 * A hook for changing the input values before saving to the database.
 *
 * Webform expects a component to consist of a single field, or a single array
 * of fields. If you have a component that requires a deeper form tree
 * you must flatten the data into a single array using this callback
 * or by setting #parents on each field to avoid data loss and/or unexpected
 * behavior.
 *
 * Note that Webform will save the result of this function directly into the
 * database.
 *
 * @param array $component
 *   A Webform component array.
 * @param array $value
 *   The POST data associated with the user input.
 *
 * @return array
 *   An array of values to be saved into the database. Note that this should be
 *   a numerically keyed array.
 */
function _webform_submit_sp_active(array $component, $value) {
  $data[0] = $value['active'];

  foreach ($value['activities'] as $activity) {
    $data[] = $activity;
  }
  return $data;
}

/**
 * Implements _webform_display_component().
 */
function _webform_display_sp_active($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_sp_active',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value) ? sp_active_display_format($value) : '',
  );
}

/**
 * Implements _webform_theme_component().
 */
function _webform_theme_sp_active() {
  return array(
    'webform_display_sp_active' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for displaying the data.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #format, #value.
 *
 * @see theme_webform_element
 *
 * @ingroup themeable
 */
function theme_webform_display_sp_active(array $variables) {
  $element = $variables['element'];
  $value = $element['#format'] == 'html' ? $element['#value'] : check_plain($element['#value']);

  return $value !== '' ? $value : ' ';
}

/**
 * Format the data in a textual representation.
 *
 * @param string[] $value
 *   An associative array containing the data information (i.e., street name,
 *   house number, postal code and the city).
 *
 * @return string
 *   A formatted string representing the data.
 */
function sp_active_display_format(array $value) {
  $output = '';

  $active_options = sp_active_get_active_options();
  $activity_options = sp_active_get_activity_options();

  if (!empty($active_options[$value[0]])) {
    $output .= '<p>' . $active_options[$value[0]] . '</p>';
  }

  $output_tmp = '';
  $no = 1;

  foreach ($activity_options as $key => $option) {
    if (in_array($key, $value)) {
      $output_tmp .= '<li>' . $option . '</li>';
    }
    $no++;
  }

  if (!empty($output_tmp)) {
    $output .= '<p>Activiteiten:<br/><ul>' . $output_tmp . '</ul>';
  }

  return $output;
}

/**
 * Implements _webform_table_component().
 */
function _webform_table_sp_active($component, $value) {
  $output = '';
  $active_options = sp_active_get_active_options();
  $activity_options = sp_active_get_activity_options();

  if (!empty($active_options[$value[0]])) {
    $output .= $active_options[$value[0]];
  }

  $output_tmp = '';
  if (!empty($value)) {
    foreach ($activity_options as $key => $option) {
      if (in_array($key, $value)) {
        $output_tmp .= ', ' . $option;
      }
    }
  }

  if (!empty($output_tmp)) {
    $output .= $output_tmp;
  }
  return $output;
}

/**
 * Implements _webform_csv_headers_component().
 */
function _webform_csv_headers_sp_active($component, $export_options) {
  $header = array();
  $header[0] = array('');
  $header[1] = array($component['name']);
  $header[2] = array();

  $header[2][] = 'Actief';

  $activity_options = sp_active_get_activity_options();
  foreach ($activity_options as $key => $option) {
    $header[2][] = $option;
  }

  return $header;
}

/**
 * Implements _webform_csv_data_component().
 */
function _webform_csv_data_sp_active($component, $export_options, $value) {
  $return = array();

  $active_options = sp_active_get_active_options();
  $activity_options = sp_active_get_activity_options();

  $return[] = $active_options[$value[0]];

  $no = 1;
  foreach ($activity_options as $key => $option) {
    if (in_array($key, $value)) {
      $return[] = 'x';
    }
    else {
      $return[] = '';
    }
    $no++;
  }
  return $return;
}

/**
 * Return active options.
 *
 * @return array
 *   Active options.
 */
function sp_active_get_active_options() {
  $options = array(
    'structureel' => 'Structureel actief',
    'incidenteel' => 'Incidenteel actief',
    'niet' => 'Niet actief',
  );
  return $options;
}

/**
 * Return activity options.
 *
 * @return array
 *   Activity options.
 */
function sp_active_get_activity_options() {
  $options = array(
    'administratief werk' => 'Administratief werk',
    'afdelingsbestuur' => 'Afdelingsbestuur',
    'belteam' => 'Belteam',
    'folderen' => 'Folderen',
    'hulpdienst' => 'Hulpdienst',
    'klussen' => 'Klussen',
    'ledenbezoek' => 'Ledenbezoek',
    'markt' => 'Markt',
    'media/website' => 'Media/website',
    'campagnes/acties' => 'Meehelpen campagnes/acties',
    'plakken' => 'Plakken',
    'politieke basisvorming' => 'Politieke basisvorming',
    'postverzending' => 'postverzending',
    'raadsfractie' => 'raadsfractie',
    'rijden' => 'Rijden',
    'rood' => 'Rood',
    'specifieke kunde' => 'Specifieke kunde',
    'tribune rondbrengen' => 'Tribune rondbrengen',
    'wijkcontactpersoon' => 'wijkcontactpersoon',
    'kloppen' => 'Kloppen',
  );
  return $options;
}

/**
 * Implements _webform_analysis_component().
 */
function _webform_analysis_sp_active($component, $sids = array(), $single = FALSE, $join = NULL) {
  $active_options = sp_active_get_active_options();
  $activity_options = sp_active_get_activity_options();

  $option_groups = array(
    'Actief' => $active_options,
    'Activiteiten' => $activity_options,
  );

  foreach ($option_groups as $title => $option_group) {
    $data['table_rows'][] = array(
      '<strong>' . $title . '</strong>',
      '',
    );
    $parts = array();
    foreach ($option_group as $key => $group) {
      $parts[] = "SUM(data = '" . $key . "') AS '" . $key . "'";
    }
    $query = 'SELECT ' . implode(', ', $parts) . ' FROM webform_submitted_data WHERE nid = :nid AND cid = :cid';
    $result = db_query($query, array('nid' => $component['nid'], 'cid' => $component['cid']))->fetchAssoc();
    foreach ($result as $key => $count) {
      $data['table_rows'][] = array(
        $option_group[$key],
        $count,
      );
    }
  }

  return $data;
}
