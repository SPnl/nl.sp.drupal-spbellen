<?php

/**
 * @file
 * Webform SP work and interests webform component.
 */

/**
 * Implements hook_webform_component_info().
 */
function sp_work_and_int_webform_component_info() {
  $components = array();

  $components['sp_work_and_int'] = array(
    'label' => 'SP werk en interesses formulier',
    'description' => 'Voegt een formulier toe waarmee het werk en de interesses van een contact kan worden aangegeven.',
    'features' => array(
      'analysis' => FALSE,
      'csv' => TRUE,
      'required' => TRUE,
      'sp_work_and_int' => TRUE,
      'conditional' => TRUE,
      'title_display' => TRUE,
      'title_inline' => TRUE,
      'private' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
  );

  return $components;
}

/**
 * Implements _webform_defaults_component().
 */
function _webform_defaults_sp_work_and_int() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'required' => FALSE,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'key' => '',
      'secret' => '',
      'private' => FALSE,
    ),
  );
}

/**
 * Implements _webform_edit_component().
 */
function _webform_edit_sp_work_and_int($component) {
  $form = array();

  return $form;
}

/**
 * Implements _webform_render_component().
 */
function _webform_render_sp_work_and_int($component) {
  // Wrap the form in a container, in order to correctly apply the weight.
  $elements = array(
    '#type' => 'container',
    '#title' => $component['name'],
    '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
    '#weight' => $component['weight'],
    '#theme_wrappers' => array('webform_element'),
    '#webform_component' => $component,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'sp_work_and_int') . '/css/sp_work_and_int.css',
      ),
    ),
  );

  $option_groups = sp_work_and_int_get_option_groups();

  foreach ($option_groups as $option_group) {
    if ($option_group['type'] == 'radios') {
      $elements[$option_group['key']] = array(
        '#type' => 'select',
        '#title' => $option_group['title'],
        '#options' => $option_group['options'],
        '#required' => $component['required'],
        '#webform_component' => array('type' => $component['type'] . '_' . $option_group['key']) + $component,
      );
    }
    else {
      $elements[$option_group['key']] = array(
        '#type' => 'checkboxes',
        '#title' => $option_group['title'],
        '#options' => $option_group['options'],
        '#required' => FALSE,
        '#webform_component' => array('type' => $component['type'] . '_' . $option_group['key']) + $component,
      );
    }
  }

  return $elements;
}

/**
 * A hook for changing the input values before saving to the database.
 *
 * Webform expects a component to consist of a single field, or a single array
 * of fields. If you have a component that requires a deeper form tree
 * you must flatten the data into a single array using this callback
 * or by setting #parents on each field to avoid data loss and/or unexpected
 * behavior.
 *
 * Note that Webform will save the result of this function directly into the
 * database.
 *
 * @param array $component
 *   A Webform component array.
 * @param array $value
 *   The POST data associated with the user input.
 *
 * @return array
 *   An array of values to be saved into the database. Note that this should be
 *   a numerically keyed array.
 */
function _webform_submit_sp_work_and_int(array $component, array $value) {
  $data = array();
  if (!empty($value)) {
    $option_groups = sp_work_and_int_get_option_groups();

    foreach ($option_groups as $option_group) {
      if ($option_group['type'] == 'radios') {
        $data[] = $value[$option_group['key']];
      }
      else {
        foreach ($value[$option_group['key']] as $option_data) {
          $data[] = $option_data;
        }
      }
    }
  }
  return $data;
}

/**
 * Implements _webform_display_component().
 */
function _webform_display_sp_work_and_int($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_sp_work_and_int',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value) ? sp_work_and_int_display_format($value) : '',
  );
}

/**
 * Implements _webform_theme_component().
 */
function _webform_theme_sp_work_and_int() {
  return array(
    'webform_display_sp_work_and_int' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for displaying the data.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #format, #value.
 *
 * @see theme_webform_element
 *
 * @ingroup themeable
 */
function theme_webform_display_sp_work_and_int(array $variables) {
  $element = $variables['element'];
  $value = $element['#format'] == 'html' ? $element['#value'] : check_plain($element['#value']);

  return $value !== '' ? $value : ' ';
}

/**
 * Format the data in a textual representation.
 *
 * @param string[] $value
 *   An associative array containing the data information (i.e., street name,
 *   house number, postal code and the city).
 *
 * @return string
 *   A formatted string representing the data.
 */
function sp_work_and_int_display_format(array $value) {
  $output = '';

  if (!empty($value)) {

    $option_groups = sp_work_and_int_get_option_groups();

    $no = 0;
    foreach ($option_groups as $option_group) {
      if ($option_group['type'] == 'radios') {
        if (!empty($option_group['options'][$value[$no]])) {
          $output .= '<p>' . $option_group['title'] . ': ' .  $option_group['options'][$value[$no]] . '</p>';
        }
        $no++;
      }
      else {

        $output_tmp = '';

        foreach ($option_group['options'] as $key => $option) {
          $no++;
          if (in_array($key, $value)) {
            $output_tmp .= '<li>' . $option . '</li>';
          }
        }

        if (!empty($output_tmp)) {
          $output .= '<p>' . $option_group['title'] . ':<ul>' . $output_tmp . '</ul>';
        }
      }
    }
  }

  return $output;
}

/**
 * Implements _webform_table_component().
 */
function _webform_table_sp_work_and_int($component, $value) {
  $output = '';

  if (!empty($value)) {
    $option_groups = sp_work_and_int_get_option_groups();

    $no = 0;
    foreach ($option_groups as $option_group) {
      if (!empty($option_group['options'][$value[$no]])) {
        $output .= '<p>' . $option_group['title'] . ': ';
      }
      if ($option_group['type'] == 'radios') {
        if (!empty($option_group['options'][$value[$no]])) {
          $output .= $option_group['options'][$value[$no]];
        }
        $no++;
      }
      else {
        $output_tmp = '';
        if (!empty($value)) {
          $options = array();
          foreach ($option_group['options'] as $key => $option) {
            $no++;
            if (in_array($key, $value)) {
              $options[] .= $option;
            }
          }
        }

        if (!empty($options)) {
          $output .= implode($options, ', ');
        }
      }
      $output .= '</p>';
    }
  }
  return $output;
}

/**
 * Implements _webform_csv_headers_component().
 */
function _webform_csv_headers_sp_work_and_int($component, $export_options) {
  $header = array();

  $option_groups = sp_work_and_int_get_option_groups();
  foreach ($option_groups as $option_group) {
    $header[0][] = '';
    if ($option_group['type'] == 'radios') {
      $header[1][] = $option_group['title'];
      $header[2][] = '';
    }
    else {
      $first = TRUE;
      foreach ($option_group['options'] as $key => $option) {
        $header[1][] = $first ? $option_group['title'] : '';
        $header[2][] = $option;
        $first = FALSE;
      }
    }
  }

  return $header;
}

/**
 * Implements _webform_csv_data_component().
 */
function _webform_csv_data_sp_work_and_int($component, $export_options, $value) {
  $return = array();

  $option_groups = sp_work_and_int_get_option_groups();

  $no = 0;
  foreach ($option_groups as $option_group) {
    if ($option_group['type'] == 'radios') {
      $return[] = $option_group['options'][$value[$no]];
      $no++;
    }
    else {
      foreach ($option_group['options'] as $key => $option) {
        $no++;
        if (in_array($key, $value)) {
          $return[] = 'x';
        }
        else {
          $return[] = '';
        }
      }
    }
  }

  return $return;
}

/**
 * Implements _webform_analysis_component().
 */
function _webform_analysis_sp_work_and_int($component, $sids = array(), $single = FALSE, $join = NULL) {
  $option_groups = sp_work_and_int_get_option_groups();

  foreach ($option_groups as $option_group) {
    $data['table_rows'][] = array(
      '<strong>' . $option_group['title'] . '</strong>',
      '',
    );
    $parts = array();
    foreach ($option_group['options'] as $key => $group) {
      $parts[] = "SUM(data = '" . $key . "') AS '" . $key . "'";
    }
    $query = 'SELECT ' . implode(', ', $parts) . ' FROM webform_submitted_data WHERE nid = :nid AND cid = :cid';
    $result = db_query($query, array('nid' => $component['nid'], 'cid' => $component['cid']))->fetchAssoc();
    foreach ($result as $key => $count) {
      $data['table_rows'][] = array(
        $option_group['options'][$key],
        $count,
      );
    }
  }

  return $data;
}

/**
 * Return option groups.
 */
function sp_work_and_int_get_option_groups() {
  $main_task_options = sp_work_and_int_get_main_task_options();
  $industrial_sector_options = sp_work_and_int_get_industrial_sector_options();
  $occupational_group_options = sp_work_and_int_get_occupational_group_options();
  $membership_options = sp_work_and_int_get_membership_options();

  $option_groups = array(
    'main_task' => array(
      'key' => 'main_task',
      'title' => 'Hoofdtaak',
      'options' => $main_task_options,
      'type' => 'checkboxes',
    ),
    'industrial_sector' => array(
      'key' => 'industrial_sector',
      'title' => 'Bedrijfstak',
      'options' => $industrial_sector_options,
      'type' => 'radios',
    ),
    'occupational_group' => array(
      'key' => 'occupational_group',
      'title' => 'Beroepsgroep',
      'options' => $occupational_group_options,
      'type' => 'radios',
    ),
    'membership' => array(
      'key' => 'membership',
      'title' => 'Lid van',
      'options' => $membership_options,
      'type' => 'checkboxes',
    ),
  );
  return $option_groups;
}

/**
 * Return work and interests options.
 */
function sp_work_and_int_get_main_task_options() {
  $options = array(
    'betaald werk' => 'Betaald werk',
    'freelance/zelfstandige' => 'Freelance/zelfstandige',
    'student/scholier' => 'Studen/scholier',
    'huisman/vrouw' => 'Huisman/vrouw',
    'arbeidsongeschikt' => 'Arbeidsongeschikt',
    'gepensioneerd' => 'Gepensioneerd',
    'vrijwilliger' => 'vrijwilliger',
    'werkloos' => 'Werkloos',
  );
  return $options;
}

/**
 * Return industrial sector options.
 */
function sp_work_and_int_get_industrial_sector_options() {
  $options = array(
    'agrarische sector' => 'Agrarische sector',
    'bouw of installatie' => 'Bouw of installatie',
    'cultuur, sport, vrije tijd' => 'Cultuur, sport, vrij tijd',
    'energie, delfstoffen, milieu' => 'Energie, delfstoffen, milieu',
    'gezondheidszorg' => 'Gezondheidszorg',
    'grafische sector, reclame' => 'Grafische sector, reclame',
    'handel, verhuur, reparatie' => 'Handel, verhuur, reparatie',
    'horeca, catering, verblijfsrecreatie' => 'Horeca, catering, verblijfsrecreatie',
    'ict, telecommunicatie' => 'ICT, telecommunicatie',
    'industrie, productiebedrijf' => 'Industrie, productiebedrijf',
    'onderwijs, universiteit, training' => 'Onderwijs, universiteit, training',
    'onderzoek, keuring en certificering' => 'Onderzoek, keuring en certificering',
    'overheid (gemeente, provincie, rijk, waterschap)' => 'Overheid (gemeente, provincie, rijk, waterschap)',
    'transport en logistiek' => 'Transport en logistiek',
    'vereniging, stichting, koepelorganisatie' => 'Vereniging, stichting, koepelorganisatie',
    'verzorging, welzijn, kinderopvang' => 'Verzorging, welzijn, kinderopvang',
    'zakelijke dienstverlening, bank, verzekeringsbedrijf' => 'Zakelijke dienstverlening, bank, verzekeringsbedrijf',
    'anders' => 'Anders',
  );
  return $options;
}

/**
 * Return occupational group options.
 */
function sp_work_and_int_get_occupational_group_options() {
  $options = array(
    'administratief beroep' => 'Administratief beroep',
    'adviseur, consulent, consultant, voorlichter' => 'Adviseur, consulent, consultant, voorlichter',
    'agrarisch beroep' => 'Agrarisch beroep',
    'bank, verzekering, belasting, accountant' => 'Bank, verzekering, belasting, accountant',
    'beveiliging, toezicht, politie, defensie' => 'Beveiliging, toezicht, politie, defensie',
    'bouw of installatie' => 'Bouw of installatie',
    'docent, trainer, onderzoeker' => 'Docent, trainer, onderzoeker',
    'elektrotechnicus, -monteur, elektricien' => 'Elektrotechnicus, -monteur, elektricien',
    'grafisch, journalistiek, media, pr, marketing' => 'Grafisch, journalistiek, media, pr, marketing',
    'horeca, catering' => 'Horeca, catering',
    'ict-beroep' => 'ICT-beroep',
    'inkoper, verkoper, sales' => 'Inkoper, verkoper, sales',
    'logistiek, transport, planner' => 'Logistiek, transport, planner',
    'maatschappelijk werk, welzijn' => 'Maatschappelijk werk, welzijn',
    'medisch, paramedisch, verzorgend, huishoudelijk' => 'Medisch, paramedisch, verzorgend, huishoudelijk',
    'personeelswerk' => 'Personeelswerk',
    'productiemedewerker' => 'Productiemedewerker',
    'secretaresse, secretaris' => 'Secretaresse, secretaris',
    'staf, management, juridisch' => 'Staf, management, juridisch',
    'winkel' => 'Winkel',
  );
  return $options;
}

/**
 * Return membership options.
 */
function sp_work_and_int_get_membership_options() {
  $options = array(
    'bewonersorganisatie' => 'Bewonersorganisatie',
    'dierenwelzijnsorganisatie' => 'Dierenwelzijnsorganisatie',
    'milieugroepering' => 'Milieugroepering',
    'or/mr' => 'OR/MR',
    'sportvereniging' => 'sportvereniging',
    'Vakbond' => 'Vakbond',
    'Vakbond (actief)' => 'Vakbond (actief)',
  );
  return $options;
}
